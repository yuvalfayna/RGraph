{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addTransactionSupport = void 0;\nconst utils_1 = require(\"./utils\");\nconst standard_as_callback_1 = require(\"standard-as-callback\");\nconst Pipeline_1 = require(\"./Pipeline\");\nfunction addTransactionSupport(redis) {\n  redis.pipeline = function (commands) {\n    const pipeline = new Pipeline_1.default(this);\n    if (Array.isArray(commands)) {\n      pipeline.addBatch(commands);\n    }\n    return pipeline;\n  };\n  const {\n    multi\n  } = redis;\n  redis.multi = function (commands, options) {\n    if (typeof options === \"undefined\" && !Array.isArray(commands)) {\n      options = commands;\n      commands = null;\n    }\n    if (options && options.pipeline === false) {\n      return multi.call(this);\n    }\n    const pipeline = new Pipeline_1.default(this);\n    // @ts-expect-error\n    pipeline.multi();\n    if (Array.isArray(commands)) {\n      pipeline.addBatch(commands);\n    }\n    const exec = pipeline.exec;\n    pipeline.exec = function (callback) {\n      // Wait for the cluster to be connected, since we need nodes information before continuing\n      if (this.isCluster && !this.redis.slots.length) {\n        if (this.redis.status === \"wait\") this.redis.connect().catch(utils_1.noop);\n        return (0, standard_as_callback_1.default)(new Promise((resolve, reject) => {\n          this.redis.delayUntilReady(err => {\n            if (err) {\n              reject(err);\n              return;\n            }\n            this.exec(pipeline).then(resolve, reject);\n          });\n        }), callback);\n      }\n      if (this._transactions > 0) {\n        exec.call(pipeline);\n      }\n      // Returns directly when the pipeline\n      // has been called multiple times (retries).\n      if (this.nodeifiedPromise) {\n        return exec.call(pipeline);\n      }\n      const promise = exec.call(pipeline);\n      return (0, standard_as_callback_1.default)(promise.then(function (result) {\n        const execResult = result[result.length - 1];\n        if (typeof execResult === \"undefined\") {\n          throw new Error(\"Pipeline cannot be used to send any commands when the `exec()` has been called on it.\");\n        }\n        if (execResult[0]) {\n          execResult[0].previousErrors = [];\n          for (let i = 0; i < result.length - 1; ++i) {\n            if (result[i][0]) {\n              execResult[0].previousErrors.push(result[i][0]);\n            }\n          }\n          throw execResult[0];\n        }\n        return (0, utils_1.wrapMultiResult)(execResult[1]);\n      }), callback);\n    };\n    // @ts-expect-error\n    const {\n      execBuffer\n    } = pipeline;\n    // @ts-expect-error\n    pipeline.execBuffer = function (callback) {\n      if (this._transactions > 0) {\n        execBuffer.call(pipeline);\n      }\n      return pipeline.exec(callback);\n    };\n    return pipeline;\n  };\n  const {\n    exec\n  } = redis;\n  redis.exec = function (callback) {\n    return (0, standard_as_callback_1.default)(exec.call(this).then(function (results) {\n      if (Array.isArray(results)) {\n        results = (0, utils_1.wrapMultiResult)(results);\n      }\n      return results;\n    }), callback);\n  };\n}\nexports.addTransactionSupport = addTransactionSupport;","map":{"version":3,"names":["Object","defineProperty","exports","value","addTransactionSupport","utils_1","require","standard_as_callback_1","Pipeline_1","redis","pipeline","commands","default","Array","isArray","addBatch","multi","options","call","exec","callback","isCluster","slots","length","status","connect","catch","noop","Promise","resolve","reject","delayUntilReady","err","then","_transactions","nodeifiedPromise","promise","result","execResult","Error","previousErrors","i","push","wrapMultiResult","execBuffer","results"],"sources":["C:/rgraph/node_modules/ioredis/built/transaction.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.addTransactionSupport = void 0;\nconst utils_1 = require(\"./utils\");\nconst standard_as_callback_1 = require(\"standard-as-callback\");\nconst Pipeline_1 = require(\"./Pipeline\");\nfunction addTransactionSupport(redis) {\n    redis.pipeline = function (commands) {\n        const pipeline = new Pipeline_1.default(this);\n        if (Array.isArray(commands)) {\n            pipeline.addBatch(commands);\n        }\n        return pipeline;\n    };\n    const { multi } = redis;\n    redis.multi = function (commands, options) {\n        if (typeof options === \"undefined\" && !Array.isArray(commands)) {\n            options = commands;\n            commands = null;\n        }\n        if (options && options.pipeline === false) {\n            return multi.call(this);\n        }\n        const pipeline = new Pipeline_1.default(this);\n        // @ts-expect-error\n        pipeline.multi();\n        if (Array.isArray(commands)) {\n            pipeline.addBatch(commands);\n        }\n        const exec = pipeline.exec;\n        pipeline.exec = function (callback) {\n            // Wait for the cluster to be connected, since we need nodes information before continuing\n            if (this.isCluster && !this.redis.slots.length) {\n                if (this.redis.status === \"wait\")\n                    this.redis.connect().catch(utils_1.noop);\n                return (0, standard_as_callback_1.default)(new Promise((resolve, reject) => {\n                    this.redis.delayUntilReady((err) => {\n                        if (err) {\n                            reject(err);\n                            return;\n                        }\n                        this.exec(pipeline).then(resolve, reject);\n                    });\n                }), callback);\n            }\n            if (this._transactions > 0) {\n                exec.call(pipeline);\n            }\n            // Returns directly when the pipeline\n            // has been called multiple times (retries).\n            if (this.nodeifiedPromise) {\n                return exec.call(pipeline);\n            }\n            const promise = exec.call(pipeline);\n            return (0, standard_as_callback_1.default)(promise.then(function (result) {\n                const execResult = result[result.length - 1];\n                if (typeof execResult === \"undefined\") {\n                    throw new Error(\"Pipeline cannot be used to send any commands when the `exec()` has been called on it.\");\n                }\n                if (execResult[0]) {\n                    execResult[0].previousErrors = [];\n                    for (let i = 0; i < result.length - 1; ++i) {\n                        if (result[i][0]) {\n                            execResult[0].previousErrors.push(result[i][0]);\n                        }\n                    }\n                    throw execResult[0];\n                }\n                return (0, utils_1.wrapMultiResult)(execResult[1]);\n            }), callback);\n        };\n        // @ts-expect-error\n        const { execBuffer } = pipeline;\n        // @ts-expect-error\n        pipeline.execBuffer = function (callback) {\n            if (this._transactions > 0) {\n                execBuffer.call(pipeline);\n            }\n            return pipeline.exec(callback);\n        };\n        return pipeline;\n    };\n    const { exec } = redis;\n    redis.exec = function (callback) {\n        return (0, standard_as_callback_1.default)(exec.call(this).then(function (results) {\n            if (Array.isArray(results)) {\n                results = (0, utils_1.wrapMultiResult)(results);\n            }\n            return results;\n        }), callback);\n    };\n}\nexports.addTransactionSupport = addTransactionSupport;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}