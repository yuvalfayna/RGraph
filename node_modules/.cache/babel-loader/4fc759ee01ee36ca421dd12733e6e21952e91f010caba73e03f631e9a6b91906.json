{"ast":null,"code":"\"use strict\";\n\nconst PoolDefaults = require(\"./PoolDefaults\");\nclass PoolOptions {\n  /**\n   * @param {Object} opts\n   *   configuration for the pool\n   * @param {Number} [opts.max=null]\n   *   Maximum number of items that can exist at the same time.  Default: 1.\n   *   Any further acquire requests will be pushed to the waiting list.\n   * @param {Number} [opts.min=null]\n   *   Minimum number of items in pool (including in-use). Default: 0.\n   *   When the pool is created, or a resource destroyed, this minimum will\n   *   be checked. If the pool resource count is below the minimum, a new\n   *   resource will be created and added to the pool.\n   * @param {Number} [opts.maxWaitingClients=null]\n   *   maximum number of queued requests allowed after which acquire calls will be rejected\n   * @param {Boolean} [opts.testOnBorrow=false]\n   *   should the pool validate resources before giving them to clients. Requires that\n   *   `factory.validate` is specified.\n   * @param {Boolean} [opts.testOnReturn=false]\n   *   should the pool validate resources before returning them to the pool.\n   * @param {Number} [opts.acquireTimeoutMillis=null]\n   *   Delay in milliseconds after which the an `acquire` call will fail. optional.\n   *   Default: undefined. Should be positive and non-zero\n   * @param {Number} [opts.destroyTimeoutMillis=null]\n   *   Delay in milliseconds after which the an `destroy` call will fail, causing it to emit a factoryDestroyError event. optional.\n   *   Default: undefined. Should be positive and non-zero\n   * @param {Number} [opts.priorityRange=1]\n   *   The range from 1 to be treated as a valid priority\n   * @param {Boolean} [opts.fifo=true]\n   *   Sets whether the pool has LIFO (last in, first out) behaviour with respect to idle objects.\n   *   if false then pool has FIFO behaviour\n   * @param {Boolean} [opts.autostart=true]\n   *   Should the pool start creating resources etc once the constructor is called\n   * @param {Number} [opts.evictionRunIntervalMillis=0]\n   *   How often to run eviction checks.  Default: 0 (does not run).\n   * @param {Number} [opts.numTestsPerEvictionRun=3]\n   *   Number of resources to check each eviction run.  Default: 3.\n   * @param {Number} [opts.softIdleTimeoutMillis=-1]\n   *   amount of time an object may sit idle in the pool before it is eligible\n   *   for eviction by the idle object evictor (if any), with the extra condition\n   *   that at least \"min idle\" object instances remain in the pool. Default -1 (nothing can get evicted)\n   * @param {Number} [opts.idleTimeoutMillis=30000]\n   *   the minimum amount of time that an object may sit idle in the pool before it is eligible for eviction\n   *   due to idle time. Supercedes \"softIdleTimeoutMillis\" Default: 30000\n   * @param {typeof Promise} [opts.Promise=Promise]\n   *   What promise implementation should the pool use, defaults to native promises.\n   */\n  constructor(opts) {\n    const poolDefaults = new PoolDefaults();\n    opts = opts || {};\n    this.fifo = typeof opts.fifo === \"boolean\" ? opts.fifo : poolDefaults.fifo;\n    this.priorityRange = opts.priorityRange || poolDefaults.priorityRange;\n    this.testOnBorrow = typeof opts.testOnBorrow === \"boolean\" ? opts.testOnBorrow : poolDefaults.testOnBorrow;\n    this.testOnReturn = typeof opts.testOnReturn === \"boolean\" ? opts.testOnReturn : poolDefaults.testOnReturn;\n    this.autostart = typeof opts.autostart === \"boolean\" ? opts.autostart : poolDefaults.autostart;\n    if (opts.acquireTimeoutMillis) {\n      // @ts-ignore\n      this.acquireTimeoutMillis = parseInt(opts.acquireTimeoutMillis, 10);\n    }\n    if (opts.destroyTimeoutMillis) {\n      // @ts-ignore\n      this.destroyTimeoutMillis = parseInt(opts.destroyTimeoutMillis, 10);\n    }\n    if (opts.maxWaitingClients !== undefined) {\n      // @ts-ignore\n      this.maxWaitingClients = parseInt(opts.maxWaitingClients, 10);\n    }\n\n    // @ts-ignore\n    this.max = parseInt(opts.max, 10);\n    // @ts-ignore\n    this.min = parseInt(opts.min, 10);\n    this.max = Math.max(isNaN(this.max) ? 1 : this.max, 1);\n    this.min = Math.min(isNaN(this.min) ? 0 : this.min, this.max);\n    this.evictionRunIntervalMillis = opts.evictionRunIntervalMillis || poolDefaults.evictionRunIntervalMillis;\n    this.numTestsPerEvictionRun = opts.numTestsPerEvictionRun || poolDefaults.numTestsPerEvictionRun;\n    this.softIdleTimeoutMillis = opts.softIdleTimeoutMillis || poolDefaults.softIdleTimeoutMillis;\n    this.idleTimeoutMillis = opts.idleTimeoutMillis || poolDefaults.idleTimeoutMillis;\n    this.Promise = opts.Promise != null ? opts.Promise : poolDefaults.Promise;\n  }\n}\nmodule.exports = PoolOptions;","map":{"version":3,"names":["PoolDefaults","require","PoolOptions","constructor","opts","poolDefaults","fifo","priorityRange","testOnBorrow","testOnReturn","autostart","acquireTimeoutMillis","parseInt","destroyTimeoutMillis","maxWaitingClients","undefined","max","min","Math","isNaN","evictionRunIntervalMillis","numTestsPerEvictionRun","softIdleTimeoutMillis","idleTimeoutMillis","Promise","module","exports"],"sources":["C:/rgraph/node_modules/generic-pool/lib/PoolOptions.js"],"sourcesContent":["\"use strict\";\n\nconst PoolDefaults = require(\"./PoolDefaults\");\n\nclass PoolOptions {\n  /**\n   * @param {Object} opts\n   *   configuration for the pool\n   * @param {Number} [opts.max=null]\n   *   Maximum number of items that can exist at the same time.  Default: 1.\n   *   Any further acquire requests will be pushed to the waiting list.\n   * @param {Number} [opts.min=null]\n   *   Minimum number of items in pool (including in-use). Default: 0.\n   *   When the pool is created, or a resource destroyed, this minimum will\n   *   be checked. If the pool resource count is below the minimum, a new\n   *   resource will be created and added to the pool.\n   * @param {Number} [opts.maxWaitingClients=null]\n   *   maximum number of queued requests allowed after which acquire calls will be rejected\n   * @param {Boolean} [opts.testOnBorrow=false]\n   *   should the pool validate resources before giving them to clients. Requires that\n   *   `factory.validate` is specified.\n   * @param {Boolean} [opts.testOnReturn=false]\n   *   should the pool validate resources before returning them to the pool.\n   * @param {Number} [opts.acquireTimeoutMillis=null]\n   *   Delay in milliseconds after which the an `acquire` call will fail. optional.\n   *   Default: undefined. Should be positive and non-zero\n   * @param {Number} [opts.destroyTimeoutMillis=null]\n   *   Delay in milliseconds after which the an `destroy` call will fail, causing it to emit a factoryDestroyError event. optional.\n   *   Default: undefined. Should be positive and non-zero\n   * @param {Number} [opts.priorityRange=1]\n   *   The range from 1 to be treated as a valid priority\n   * @param {Boolean} [opts.fifo=true]\n   *   Sets whether the pool has LIFO (last in, first out) behaviour with respect to idle objects.\n   *   if false then pool has FIFO behaviour\n   * @param {Boolean} [opts.autostart=true]\n   *   Should the pool start creating resources etc once the constructor is called\n   * @param {Number} [opts.evictionRunIntervalMillis=0]\n   *   How often to run eviction checks.  Default: 0 (does not run).\n   * @param {Number} [opts.numTestsPerEvictionRun=3]\n   *   Number of resources to check each eviction run.  Default: 3.\n   * @param {Number} [opts.softIdleTimeoutMillis=-1]\n   *   amount of time an object may sit idle in the pool before it is eligible\n   *   for eviction by the idle object evictor (if any), with the extra condition\n   *   that at least \"min idle\" object instances remain in the pool. Default -1 (nothing can get evicted)\n   * @param {Number} [opts.idleTimeoutMillis=30000]\n   *   the minimum amount of time that an object may sit idle in the pool before it is eligible for eviction\n   *   due to idle time. Supercedes \"softIdleTimeoutMillis\" Default: 30000\n   * @param {typeof Promise} [opts.Promise=Promise]\n   *   What promise implementation should the pool use, defaults to native promises.\n   */\n  constructor(opts) {\n    const poolDefaults = new PoolDefaults();\n\n    opts = opts || {};\n\n    this.fifo = typeof opts.fifo === \"boolean\" ? opts.fifo : poolDefaults.fifo;\n    this.priorityRange = opts.priorityRange || poolDefaults.priorityRange;\n\n    this.testOnBorrow =\n      typeof opts.testOnBorrow === \"boolean\"\n        ? opts.testOnBorrow\n        : poolDefaults.testOnBorrow;\n    this.testOnReturn =\n      typeof opts.testOnReturn === \"boolean\"\n        ? opts.testOnReturn\n        : poolDefaults.testOnReturn;\n\n    this.autostart =\n      typeof opts.autostart === \"boolean\"\n        ? opts.autostart\n        : poolDefaults.autostart;\n\n    if (opts.acquireTimeoutMillis) {\n      // @ts-ignore\n      this.acquireTimeoutMillis = parseInt(opts.acquireTimeoutMillis, 10);\n    }\n\n    if (opts.destroyTimeoutMillis) {\n      // @ts-ignore\n      this.destroyTimeoutMillis = parseInt(opts.destroyTimeoutMillis, 10);\n    }\n\n    if (opts.maxWaitingClients !== undefined) {\n      // @ts-ignore\n      this.maxWaitingClients = parseInt(opts.maxWaitingClients, 10);\n    }\n\n    // @ts-ignore\n    this.max = parseInt(opts.max, 10);\n    // @ts-ignore\n    this.min = parseInt(opts.min, 10);\n\n    this.max = Math.max(isNaN(this.max) ? 1 : this.max, 1);\n    this.min = Math.min(isNaN(this.min) ? 0 : this.min, this.max);\n\n    this.evictionRunIntervalMillis =\n      opts.evictionRunIntervalMillis || poolDefaults.evictionRunIntervalMillis;\n    this.numTestsPerEvictionRun =\n      opts.numTestsPerEvictionRun || poolDefaults.numTestsPerEvictionRun;\n    this.softIdleTimeoutMillis =\n      opts.softIdleTimeoutMillis || poolDefaults.softIdleTimeoutMillis;\n    this.idleTimeoutMillis =\n      opts.idleTimeoutMillis || poolDefaults.idleTimeoutMillis;\n\n    this.Promise = opts.Promise != null ? opts.Promise : poolDefaults.Promise;\n  }\n}\n\nmodule.exports = PoolOptions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}