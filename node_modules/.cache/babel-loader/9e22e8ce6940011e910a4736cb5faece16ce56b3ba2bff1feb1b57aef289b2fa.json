{"ast":null,"code":"import { createClient } from 'redis';\nimport express from 'express';\nimport cors from 'cors';\n\n// Create the Express app\nconst app = express();\napp.use(cors());\napp.use(express.json());\nconst client = createClient({\n  password: 'p7LS233UJKNl8F4eCSrb8OSWnluC9MLB',\n  socket: {\n    host: 'redis-19666.c16.us-east-1-3.ec2.redns.redis-cloud.com',\n    port: 19666\n  }\n});\nclient.on('error', err => console.log('Redis Client Error', err));\n(async () => {\n  await client.connect();\n  console.log('Connected to Redis');\n})();\napp.get('/data', async (req, res) => {\n  try {\n    const keys = await client.keys(\"*random*\");\n    const jdata = await Promise.all(keys.map(id => client.get(id)));\n    const data = await Promise.all(jdata.map(item => JSON.parse(item)[0]));\n    res.json({\n      data\n    });\n  } catch (err) {\n    console.error('Error fetching from Redis:', err);\n    res.status(500).send('Server error');\n  }\n});\nconst port = process.env.PORT || 5000;\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});\nexport { client };","map":{"version":3,"names":["createClient","express","cors","app","use","json","client","password","socket","host","port","on","err","console","log","connect","get","req","res","keys","jdata","Promise","all","map","id","data","item","JSON","parse","error","status","send","process","env","PORT","listen"],"sources":["C:/rgraph/src/redis_connection.js"],"sourcesContent":["import { createClient } from 'redis';\r\nimport express from 'express';\r\nimport cors from 'cors';\r\n\r\n// Create the Express app\r\nconst app = express();\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\nconst client = createClient({\r\n    password: 'p7LS233UJKNl8F4eCSrb8OSWnluC9MLB',\r\n    socket: {\r\n        host: 'redis-19666.c16.us-east-1-3.ec2.redns.redis-cloud.com',\r\n        port: 19666\r\n    }\r\n});\r\nclient.on('error', (err) => console.log('Redis Client Error', err));\r\n\r\n(async () => {\r\n    await client.connect();\r\n    console.log('Connected to Redis');\r\n})();\r\n\r\napp.get('/data', async (req, res) => {\r\n    try {\r\n        const keys= await client.keys(\"*random*\");\r\n        const jdata=await Promise.all(keys.map((id)=>client.get(id)));\r\n        const data= await Promise.all(jdata.map(item => JSON.parse(item)[0]));\r\n        res.json({ data });\r\n        } catch (err) {\r\n        console.error('Error fetching from Redis:', err);\r\n        res.status(500).send('Server error');\r\n    }\r\n});\r\nconst port = process.env.PORT || 5000;\r\napp.listen(port, () => {\r\n    console.log(`Server running on port ${port}`);\r\n});\r\n\r\nexport {client};\r\n\r\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,OAAO;AACpC,OAAOC,OAAO,MAAM,SAAS;AAC7B,OAAOC,IAAI,MAAM,MAAM;;AAEvB;AACA,MAAMC,GAAG,GAAGF,OAAO,CAAC,CAAC;AACrBE,GAAG,CAACC,GAAG,CAACF,IAAI,CAAC,CAAC,CAAC;AACfC,GAAG,CAACC,GAAG,CAACH,OAAO,CAACI,IAAI,CAAC,CAAC,CAAC;AAEvB,MAAMC,MAAM,GAAGN,YAAY,CAAC;EACxBO,QAAQ,EAAE,kCAAkC;EAC5CC,MAAM,EAAE;IACJC,IAAI,EAAE,uDAAuD;IAC7DC,IAAI,EAAE;EACV;AACJ,CAAC,CAAC;AACFJ,MAAM,CAACK,EAAE,CAAC,OAAO,EAAGC,GAAG,IAAKC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,GAAG,CAAC,CAAC;AAEnE,CAAC,YAAY;EACT,MAAMN,MAAM,CAACS,OAAO,CAAC,CAAC;EACtBF,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;AACrC,CAAC,EAAE,CAAC;AAEJX,GAAG,CAACa,GAAG,CAAC,OAAO,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACjC,IAAI;IACA,MAAMC,IAAI,GAAE,MAAMb,MAAM,CAACa,IAAI,CAAC,UAAU,CAAC;IACzC,MAAMC,KAAK,GAAC,MAAMC,OAAO,CAACC,GAAG,CAACH,IAAI,CAACI,GAAG,CAAEC,EAAE,IAAGlB,MAAM,CAACU,GAAG,CAACQ,EAAE,CAAC,CAAC,CAAC;IAC7D,MAAMC,IAAI,GAAE,MAAMJ,OAAO,CAACC,GAAG,CAACF,KAAK,CAACG,GAAG,CAACG,IAAI,IAAIC,IAAI,CAACC,KAAK,CAACF,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrER,GAAG,CAACb,IAAI,CAAC;MAAEoB;IAAK,CAAC,CAAC;EAClB,CAAC,CAAC,OAAOb,GAAG,EAAE;IACdC,OAAO,CAACgB,KAAK,CAAC,4BAA4B,EAAEjB,GAAG,CAAC;IAChDM,GAAG,CAACY,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,cAAc,CAAC;EACxC;AACJ,CAAC,CAAC;AACF,MAAMrB,IAAI,GAAGsB,OAAO,CAACC,GAAG,CAACC,IAAI,IAAI,IAAI;AACrC/B,GAAG,CAACgC,MAAM,CAACzB,IAAI,EAAE,MAAM;EACnBG,OAAO,CAACC,GAAG,CAAC,0BAA0BJ,IAAI,EAAE,CAAC;AACjD,CAAC,CAAC;AAEF,SAAQJ,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}