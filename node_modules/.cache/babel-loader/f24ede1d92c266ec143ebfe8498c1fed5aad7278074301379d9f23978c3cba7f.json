{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst errors_1 = require(\"../../errors\");\nconst buffer_1 = require(\"./composers/buffer\");\nconst string_1 = require(\"./composers/string\");\n// RESP2 specification\n// https://redis.io/topics/protocol\nvar Types;\n(function (Types) {\n  Types[Types[\"SIMPLE_STRING\"] = 43] = \"SIMPLE_STRING\";\n  Types[Types[\"ERROR\"] = 45] = \"ERROR\";\n  Types[Types[\"INTEGER\"] = 58] = \"INTEGER\";\n  Types[Types[\"BULK_STRING\"] = 36] = \"BULK_STRING\";\n  Types[Types[\"ARRAY\"] = 42] = \"ARRAY\"; // *\n})(Types || (Types = {}));\nvar ASCII;\n(function (ASCII) {\n  ASCII[ASCII[\"CR\"] = 13] = \"CR\";\n  ASCII[ASCII[\"ZERO\"] = 48] = \"ZERO\";\n  ASCII[ASCII[\"MINUS\"] = 45] = \"MINUS\";\n})(ASCII || (ASCII = {}));\n// Using TypeScript `private` and not the build-in `#` to avoid __classPrivateFieldGet and __classPrivateFieldSet\nclass RESP2Decoder {\n  constructor(options) {\n    Object.defineProperty(this, \"options\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: options\n    });\n    Object.defineProperty(this, \"cursor\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"type\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"bufferComposer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new buffer_1.default()\n    });\n    Object.defineProperty(this, \"stringComposer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new string_1.default()\n    });\n    Object.defineProperty(this, \"currentStringComposer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.stringComposer\n    });\n    Object.defineProperty(this, \"integer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"isNegativeInteger\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"bulkStringRemainingLength\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"arraysInProcess\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(this, \"initializeArray\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"arrayItemType\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n  }\n  reset() {\n    this.cursor = 0;\n    this.type = undefined;\n    this.bufferComposer.reset();\n    this.stringComposer.reset();\n    this.currentStringComposer = this.stringComposer;\n  }\n  write(chunk) {\n    while (this.cursor < chunk.length) {\n      if (!this.type) {\n        this.currentStringComposer = this.options.returnStringsAsBuffers() ? this.bufferComposer : this.stringComposer;\n        this.type = chunk[this.cursor];\n        if (++this.cursor >= chunk.length) break;\n      }\n      const reply = this.parseType(chunk, this.type);\n      if (reply === undefined) break;\n      this.type = undefined;\n      this.options.onReply(reply);\n    }\n    this.cursor -= chunk.length;\n  }\n  parseType(chunk, type, arraysToKeep) {\n    switch (type) {\n      case Types.SIMPLE_STRING:\n        return this.parseSimpleString(chunk);\n      case Types.ERROR:\n        return this.parseError(chunk);\n      case Types.INTEGER:\n        return this.parseInteger(chunk);\n      case Types.BULK_STRING:\n        return this.parseBulkString(chunk);\n      case Types.ARRAY:\n        return this.parseArray(chunk, arraysToKeep);\n    }\n  }\n  compose(chunk, composer) {\n    for (let i = this.cursor; i < chunk.length; i++) {\n      if (chunk[i] === ASCII.CR) {\n        const reply = composer.end(chunk.subarray(this.cursor, i));\n        this.cursor = i + 2;\n        return reply;\n      }\n    }\n    const toWrite = chunk.subarray(this.cursor);\n    composer.write(toWrite);\n    this.cursor = chunk.length;\n  }\n  parseSimpleString(chunk) {\n    return this.compose(chunk, this.currentStringComposer);\n  }\n  parseError(chunk) {\n    const message = this.compose(chunk, this.stringComposer);\n    if (message !== undefined) {\n      return new errors_1.ErrorReply(message);\n    }\n  }\n  parseInteger(chunk) {\n    if (this.isNegativeInteger === undefined) {\n      this.isNegativeInteger = chunk[this.cursor] === ASCII.MINUS;\n      if (this.isNegativeInteger && ++this.cursor === chunk.length) return;\n    }\n    do {\n      const byte = chunk[this.cursor];\n      if (byte === ASCII.CR) {\n        const integer = this.isNegativeInteger ? -this.integer : this.integer;\n        this.integer = 0;\n        this.isNegativeInteger = undefined;\n        this.cursor += 2;\n        return integer;\n      }\n      this.integer = this.integer * 10 + byte - ASCII.ZERO;\n    } while (++this.cursor < chunk.length);\n  }\n  parseBulkString(chunk) {\n    if (this.bulkStringRemainingLength === undefined) {\n      const length = this.parseInteger(chunk);\n      if (length === undefined) return;\n      if (length === -1) return null;\n      this.bulkStringRemainingLength = length;\n      if (this.cursor >= chunk.length) return;\n    }\n    const end = this.cursor + this.bulkStringRemainingLength;\n    if (chunk.length >= end) {\n      const reply = this.currentStringComposer.end(chunk.subarray(this.cursor, end));\n      this.bulkStringRemainingLength = undefined;\n      this.cursor = end + 2;\n      return reply;\n    }\n    const toWrite = chunk.subarray(this.cursor);\n    this.currentStringComposer.write(toWrite);\n    this.bulkStringRemainingLength -= toWrite.length;\n    this.cursor = chunk.length;\n  }\n  parseArray(chunk, arraysToKeep = 0) {\n    if (this.initializeArray || this.arraysInProcess.length === arraysToKeep) {\n      const length = this.parseInteger(chunk);\n      if (length === undefined) {\n        this.initializeArray = true;\n        return undefined;\n      }\n      this.initializeArray = false;\n      this.arrayItemType = undefined;\n      if (length === -1) {\n        return this.returnArrayReply(null, arraysToKeep, chunk);\n      } else if (length === 0) {\n        return this.returnArrayReply([], arraysToKeep, chunk);\n      }\n      this.arraysInProcess.push({\n        array: new Array(length),\n        pushCounter: 0\n      });\n    }\n    while (this.cursor < chunk.length) {\n      if (!this.arrayItemType) {\n        this.arrayItemType = chunk[this.cursor];\n        if (++this.cursor >= chunk.length) break;\n      }\n      const item = this.parseType(chunk, this.arrayItemType, arraysToKeep + 1);\n      if (item === undefined) break;\n      this.arrayItemType = undefined;\n      const reply = this.pushArrayItem(item, arraysToKeep);\n      if (reply !== undefined) return reply;\n    }\n  }\n  returnArrayReply(reply, arraysToKeep, chunk) {\n    if (this.arraysInProcess.length <= arraysToKeep) return reply;\n    return this.pushArrayItem(reply, arraysToKeep, chunk);\n  }\n  pushArrayItem(item, arraysToKeep, chunk) {\n    const to = this.arraysInProcess[this.arraysInProcess.length - 1];\n    to.array[to.pushCounter] = item;\n    if (++to.pushCounter === to.array.length) {\n      return this.returnArrayReply(this.arraysInProcess.pop().array, arraysToKeep, chunk);\n    } else if (chunk && chunk.length > this.cursor) {\n      return this.parseArray(chunk, arraysToKeep);\n    }\n  }\n}\nexports.default = RESP2Decoder;","map":{"version":3,"names":["Object","defineProperty","exports","value","errors_1","require","buffer_1","string_1","Types","ASCII","RESP2Decoder","constructor","options","enumerable","configurable","writable","default","stringComposer","reset","cursor","type","undefined","bufferComposer","currentStringComposer","write","chunk","length","returnStringsAsBuffers","reply","parseType","onReply","arraysToKeep","SIMPLE_STRING","parseSimpleString","ERROR","parseError","INTEGER","parseInteger","BULK_STRING","parseBulkString","ARRAY","parseArray","compose","composer","i","CR","end","subarray","toWrite","message","ErrorReply","isNegativeInteger","MINUS","byte","integer","ZERO","bulkStringRemainingLength","initializeArray","arraysInProcess","arrayItemType","returnArrayReply","push","array","Array","pushCounter","item","pushArrayItem","to","pop"],"sources":["C:/rgraph/node_modules/@redis/client/dist/lib/client/RESP2/decoder.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst errors_1 = require(\"../../errors\");\nconst buffer_1 = require(\"./composers/buffer\");\nconst string_1 = require(\"./composers/string\");\n// RESP2 specification\n// https://redis.io/topics/protocol\nvar Types;\n(function (Types) {\n    Types[Types[\"SIMPLE_STRING\"] = 43] = \"SIMPLE_STRING\";\n    Types[Types[\"ERROR\"] = 45] = \"ERROR\";\n    Types[Types[\"INTEGER\"] = 58] = \"INTEGER\";\n    Types[Types[\"BULK_STRING\"] = 36] = \"BULK_STRING\";\n    Types[Types[\"ARRAY\"] = 42] = \"ARRAY\"; // *\n})(Types || (Types = {}));\nvar ASCII;\n(function (ASCII) {\n    ASCII[ASCII[\"CR\"] = 13] = \"CR\";\n    ASCII[ASCII[\"ZERO\"] = 48] = \"ZERO\";\n    ASCII[ASCII[\"MINUS\"] = 45] = \"MINUS\";\n})(ASCII || (ASCII = {}));\n// Using TypeScript `private` and not the build-in `#` to avoid __classPrivateFieldGet and __classPrivateFieldSet\nclass RESP2Decoder {\n    constructor(options) {\n        Object.defineProperty(this, \"options\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: options\n        });\n        Object.defineProperty(this, \"cursor\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"type\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"bufferComposer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new buffer_1.default()\n        });\n        Object.defineProperty(this, \"stringComposer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new string_1.default()\n        });\n        Object.defineProperty(this, \"currentStringComposer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: this.stringComposer\n        });\n        Object.defineProperty(this, \"integer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"isNegativeInteger\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"bulkStringRemainingLength\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"arraysInProcess\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"initializeArray\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"arrayItemType\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    reset() {\n        this.cursor = 0;\n        this.type = undefined;\n        this.bufferComposer.reset();\n        this.stringComposer.reset();\n        this.currentStringComposer = this.stringComposer;\n    }\n    write(chunk) {\n        while (this.cursor < chunk.length) {\n            if (!this.type) {\n                this.currentStringComposer = this.options.returnStringsAsBuffers() ?\n                    this.bufferComposer :\n                    this.stringComposer;\n                this.type = chunk[this.cursor];\n                if (++this.cursor >= chunk.length)\n                    break;\n            }\n            const reply = this.parseType(chunk, this.type);\n            if (reply === undefined)\n                break;\n            this.type = undefined;\n            this.options.onReply(reply);\n        }\n        this.cursor -= chunk.length;\n    }\n    parseType(chunk, type, arraysToKeep) {\n        switch (type) {\n            case Types.SIMPLE_STRING:\n                return this.parseSimpleString(chunk);\n            case Types.ERROR:\n                return this.parseError(chunk);\n            case Types.INTEGER:\n                return this.parseInteger(chunk);\n            case Types.BULK_STRING:\n                return this.parseBulkString(chunk);\n            case Types.ARRAY:\n                return this.parseArray(chunk, arraysToKeep);\n        }\n    }\n    compose(chunk, composer) {\n        for (let i = this.cursor; i < chunk.length; i++) {\n            if (chunk[i] === ASCII.CR) {\n                const reply = composer.end(chunk.subarray(this.cursor, i));\n                this.cursor = i + 2;\n                return reply;\n            }\n        }\n        const toWrite = chunk.subarray(this.cursor);\n        composer.write(toWrite);\n        this.cursor = chunk.length;\n    }\n    parseSimpleString(chunk) {\n        return this.compose(chunk, this.currentStringComposer);\n    }\n    parseError(chunk) {\n        const message = this.compose(chunk, this.stringComposer);\n        if (message !== undefined) {\n            return new errors_1.ErrorReply(message);\n        }\n    }\n    parseInteger(chunk) {\n        if (this.isNegativeInteger === undefined) {\n            this.isNegativeInteger = chunk[this.cursor] === ASCII.MINUS;\n            if (this.isNegativeInteger && ++this.cursor === chunk.length)\n                return;\n        }\n        do {\n            const byte = chunk[this.cursor];\n            if (byte === ASCII.CR) {\n                const integer = this.isNegativeInteger ? -this.integer : this.integer;\n                this.integer = 0;\n                this.isNegativeInteger = undefined;\n                this.cursor += 2;\n                return integer;\n            }\n            this.integer = this.integer * 10 + byte - ASCII.ZERO;\n        } while (++this.cursor < chunk.length);\n    }\n    parseBulkString(chunk) {\n        if (this.bulkStringRemainingLength === undefined) {\n            const length = this.parseInteger(chunk);\n            if (length === undefined)\n                return;\n            if (length === -1)\n                return null;\n            this.bulkStringRemainingLength = length;\n            if (this.cursor >= chunk.length)\n                return;\n        }\n        const end = this.cursor + this.bulkStringRemainingLength;\n        if (chunk.length >= end) {\n            const reply = this.currentStringComposer.end(chunk.subarray(this.cursor, end));\n            this.bulkStringRemainingLength = undefined;\n            this.cursor = end + 2;\n            return reply;\n        }\n        const toWrite = chunk.subarray(this.cursor);\n        this.currentStringComposer.write(toWrite);\n        this.bulkStringRemainingLength -= toWrite.length;\n        this.cursor = chunk.length;\n    }\n    parseArray(chunk, arraysToKeep = 0) {\n        if (this.initializeArray || this.arraysInProcess.length === arraysToKeep) {\n            const length = this.parseInteger(chunk);\n            if (length === undefined) {\n                this.initializeArray = true;\n                return undefined;\n            }\n            this.initializeArray = false;\n            this.arrayItemType = undefined;\n            if (length === -1) {\n                return this.returnArrayReply(null, arraysToKeep, chunk);\n            }\n            else if (length === 0) {\n                return this.returnArrayReply([], arraysToKeep, chunk);\n            }\n            this.arraysInProcess.push({\n                array: new Array(length),\n                pushCounter: 0\n            });\n        }\n        while (this.cursor < chunk.length) {\n            if (!this.arrayItemType) {\n                this.arrayItemType = chunk[this.cursor];\n                if (++this.cursor >= chunk.length)\n                    break;\n            }\n            const item = this.parseType(chunk, this.arrayItemType, arraysToKeep + 1);\n            if (item === undefined)\n                break;\n            this.arrayItemType = undefined;\n            const reply = this.pushArrayItem(item, arraysToKeep);\n            if (reply !== undefined)\n                return reply;\n        }\n    }\n    returnArrayReply(reply, arraysToKeep, chunk) {\n        if (this.arraysInProcess.length <= arraysToKeep)\n            return reply;\n        return this.pushArrayItem(reply, arraysToKeep, chunk);\n    }\n    pushArrayItem(item, arraysToKeep, chunk) {\n        const to = this.arraysInProcess[this.arraysInProcess.length - 1];\n        to.array[to.pushCounter] = item;\n        if (++to.pushCounter === to.array.length) {\n            return this.returnArrayReply(this.arraysInProcess.pop().array, arraysToKeep, chunk);\n        }\n        else if (chunk && chunk.length > this.cursor) {\n            return this.parseArray(chunk, arraysToKeep);\n        }\n    }\n}\nexports.default = RESP2Decoder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}