{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FailoverDetector = void 0;\nconst utils_1 = require(\"../../utils\");\nconst debug = (0, utils_1.Debug)(\"FailoverDetector\");\nconst CHANNEL_NAME = \"+switch-master\";\nclass FailoverDetector {\n  // sentinels can't be used for regular commands after this\n  constructor(connector, sentinels) {\n    this.isDisconnected = false;\n    this.connector = connector;\n    this.sentinels = sentinels;\n  }\n  cleanup() {\n    this.isDisconnected = true;\n    for (const sentinel of this.sentinels) {\n      sentinel.client.disconnect();\n    }\n  }\n  async subscribe() {\n    debug(\"Starting FailoverDetector\");\n    const promises = [];\n    for (const sentinel of this.sentinels) {\n      const promise = sentinel.client.subscribe(CHANNEL_NAME).catch(err => {\n        debug(\"Failed to subscribe to failover messages on sentinel %s:%s (%s)\", sentinel.address.host || \"127.0.0.1\", sentinel.address.port || 26739, err.message);\n      });\n      promises.push(promise);\n      sentinel.client.on(\"message\", channel => {\n        if (!this.isDisconnected && channel === CHANNEL_NAME) {\n          this.disconnect();\n        }\n      });\n    }\n    await Promise.all(promises);\n  }\n  disconnect() {\n    // Avoid disconnecting more than once per failover.\n    // A new FailoverDetector will be created after reconnecting.\n    this.isDisconnected = true;\n    debug(\"Failover detected, disconnecting\");\n    // Will call this.cleanup()\n    this.connector.disconnect();\n  }\n}\nexports.FailoverDetector = FailoverDetector;","map":{"version":3,"names":["Object","defineProperty","exports","value","FailoverDetector","utils_1","require","debug","Debug","CHANNEL_NAME","constructor","connector","sentinels","isDisconnected","cleanup","sentinel","client","disconnect","subscribe","promises","promise","catch","err","address","host","port","message","push","on","channel","Promise","all"],"sources":["C:/rgraph/node_modules/ioredis/built/connectors/SentinelConnector/FailoverDetector.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FailoverDetector = void 0;\nconst utils_1 = require(\"../../utils\");\nconst debug = (0, utils_1.Debug)(\"FailoverDetector\");\nconst CHANNEL_NAME = \"+switch-master\";\nclass FailoverDetector {\n    // sentinels can't be used for regular commands after this\n    constructor(connector, sentinels) {\n        this.isDisconnected = false;\n        this.connector = connector;\n        this.sentinels = sentinels;\n    }\n    cleanup() {\n        this.isDisconnected = true;\n        for (const sentinel of this.sentinels) {\n            sentinel.client.disconnect();\n        }\n    }\n    async subscribe() {\n        debug(\"Starting FailoverDetector\");\n        const promises = [];\n        for (const sentinel of this.sentinels) {\n            const promise = sentinel.client.subscribe(CHANNEL_NAME).catch((err) => {\n                debug(\"Failed to subscribe to failover messages on sentinel %s:%s (%s)\", sentinel.address.host || \"127.0.0.1\", sentinel.address.port || 26739, err.message);\n            });\n            promises.push(promise);\n            sentinel.client.on(\"message\", (channel) => {\n                if (!this.isDisconnected && channel === CHANNEL_NAME) {\n                    this.disconnect();\n                }\n            });\n        }\n        await Promise.all(promises);\n    }\n    disconnect() {\n        // Avoid disconnecting more than once per failover.\n        // A new FailoverDetector will be created after reconnecting.\n        this.isDisconnected = true;\n        debug(\"Failover detected, disconnecting\");\n        // Will call this.cleanup()\n        this.connector.disconnect();\n    }\n}\nexports.FailoverDetector = FailoverDetector;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,gBAAgB,GAAG,KAAK,CAAC;AACjC,MAAMC,OAAO,GAAGC,OAAO,CAAC,aAAa,CAAC;AACtC,MAAMC,KAAK,GAAG,CAAC,CAAC,EAAEF,OAAO,CAACG,KAAK,EAAE,kBAAkB,CAAC;AACpD,MAAMC,YAAY,GAAG,gBAAgB;AACrC,MAAML,gBAAgB,CAAC;EACnB;EACAM,WAAWA,CAACC,SAAS,EAAEC,SAAS,EAAE;IAC9B,IAAI,CAACC,cAAc,GAAG,KAAK;IAC3B,IAAI,CAACF,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,SAAS,GAAGA,SAAS;EAC9B;EACAE,OAAOA,CAAA,EAAG;IACN,IAAI,CAACD,cAAc,GAAG,IAAI;IAC1B,KAAK,MAAME,QAAQ,IAAI,IAAI,CAACH,SAAS,EAAE;MACnCG,QAAQ,CAACC,MAAM,CAACC,UAAU,CAAC,CAAC;IAChC;EACJ;EACA,MAAMC,SAASA,CAAA,EAAG;IACdX,KAAK,CAAC,2BAA2B,CAAC;IAClC,MAAMY,QAAQ,GAAG,EAAE;IACnB,KAAK,MAAMJ,QAAQ,IAAI,IAAI,CAACH,SAAS,EAAE;MACnC,MAAMQ,OAAO,GAAGL,QAAQ,CAACC,MAAM,CAACE,SAAS,CAACT,YAAY,CAAC,CAACY,KAAK,CAAEC,GAAG,IAAK;QACnEf,KAAK,CAAC,iEAAiE,EAAEQ,QAAQ,CAACQ,OAAO,CAACC,IAAI,IAAI,WAAW,EAAET,QAAQ,CAACQ,OAAO,CAACE,IAAI,IAAI,KAAK,EAAEH,GAAG,CAACI,OAAO,CAAC;MAC/J,CAAC,CAAC;MACFP,QAAQ,CAACQ,IAAI,CAACP,OAAO,CAAC;MACtBL,QAAQ,CAACC,MAAM,CAACY,EAAE,CAAC,SAAS,EAAGC,OAAO,IAAK;QACvC,IAAI,CAAC,IAAI,CAAChB,cAAc,IAAIgB,OAAO,KAAKpB,YAAY,EAAE;UAClD,IAAI,CAACQ,UAAU,CAAC,CAAC;QACrB;MACJ,CAAC,CAAC;IACN;IACA,MAAMa,OAAO,CAACC,GAAG,CAACZ,QAAQ,CAAC;EAC/B;EACAF,UAAUA,CAAA,EAAG;IACT;IACA;IACA,IAAI,CAACJ,cAAc,GAAG,IAAI;IAC1BN,KAAK,CAAC,kCAAkC,CAAC;IACzC;IACA,IAAI,CAACI,SAAS,CAACM,UAAU,CAAC,CAAC;EAC/B;AACJ;AACAf,OAAO,CAACE,gBAAgB,GAAGA,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}