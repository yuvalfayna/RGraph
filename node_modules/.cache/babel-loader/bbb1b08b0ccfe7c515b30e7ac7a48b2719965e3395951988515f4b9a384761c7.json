{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getConnectionName = exports.weightSrvRecords = exports.groupSrvRecords = exports.getUniqueHostnamesFromOptions = exports.normalizeNodeOptions = exports.nodeKeyToRedisOptions = exports.getNodeKey = void 0;\nconst utils_1 = require(\"../utils\");\nconst net_1 = require(\"net\");\nfunction getNodeKey(node) {\n  node.port = node.port || 6379;\n  node.host = node.host || \"127.0.0.1\";\n  return node.host + \":\" + node.port;\n}\nexports.getNodeKey = getNodeKey;\nfunction nodeKeyToRedisOptions(nodeKey) {\n  const portIndex = nodeKey.lastIndexOf(\":\");\n  if (portIndex === -1) {\n    throw new Error(`Invalid node key ${nodeKey}`);\n  }\n  return {\n    host: nodeKey.slice(0, portIndex),\n    port: Number(nodeKey.slice(portIndex + 1))\n  };\n}\nexports.nodeKeyToRedisOptions = nodeKeyToRedisOptions;\nfunction normalizeNodeOptions(nodes) {\n  return nodes.map(node => {\n    const options = {};\n    if (typeof node === \"object\") {\n      Object.assign(options, node);\n    } else if (typeof node === \"string\") {\n      Object.assign(options, (0, utils_1.parseURL)(node));\n    } else if (typeof node === \"number\") {\n      options.port = node;\n    } else {\n      throw new Error(\"Invalid argument \" + node);\n    }\n    if (typeof options.port === \"string\") {\n      options.port = parseInt(options.port, 10);\n    }\n    // Cluster mode only support db 0\n    delete options.db;\n    if (!options.port) {\n      options.port = 6379;\n    }\n    if (!options.host) {\n      options.host = \"127.0.0.1\";\n    }\n    return (0, utils_1.resolveTLSProfile)(options);\n  });\n}\nexports.normalizeNodeOptions = normalizeNodeOptions;\nfunction getUniqueHostnamesFromOptions(nodes) {\n  const uniqueHostsMap = {};\n  nodes.forEach(node => {\n    uniqueHostsMap[node.host] = true;\n  });\n  return Object.keys(uniqueHostsMap).filter(host => !(0, net_1.isIP)(host));\n}\nexports.getUniqueHostnamesFromOptions = getUniqueHostnamesFromOptions;\nfunction groupSrvRecords(records) {\n  const recordsByPriority = {};\n  for (const record of records) {\n    if (!recordsByPriority.hasOwnProperty(record.priority)) {\n      recordsByPriority[record.priority] = {\n        totalWeight: record.weight,\n        records: [record]\n      };\n    } else {\n      recordsByPriority[record.priority].totalWeight += record.weight;\n      recordsByPriority[record.priority].records.push(record);\n    }\n  }\n  return recordsByPriority;\n}\nexports.groupSrvRecords = groupSrvRecords;\nfunction weightSrvRecords(recordsGroup) {\n  if (recordsGroup.records.length === 1) {\n    recordsGroup.totalWeight = 0;\n    return recordsGroup.records.shift();\n  }\n  // + `recordsGroup.records.length` to support `weight` 0\n  const random = Math.floor(Math.random() * (recordsGroup.totalWeight + recordsGroup.records.length));\n  let total = 0;\n  for (const [i, record] of recordsGroup.records.entries()) {\n    total += 1 + record.weight;\n    if (total > random) {\n      recordsGroup.totalWeight -= record.weight;\n      recordsGroup.records.splice(i, 1);\n      return record;\n    }\n  }\n}\nexports.weightSrvRecords = weightSrvRecords;\nfunction getConnectionName(component, nodeConnectionName) {\n  const prefix = `ioredis-cluster(${component})`;\n  return nodeConnectionName ? `${prefix}:${nodeConnectionName}` : prefix;\n}\nexports.getConnectionName = getConnectionName;","map":{"version":3,"names":["Object","defineProperty","exports","value","getConnectionName","weightSrvRecords","groupSrvRecords","getUniqueHostnamesFromOptions","normalizeNodeOptions","nodeKeyToRedisOptions","getNodeKey","utils_1","require","net_1","node","port","host","nodeKey","portIndex","lastIndexOf","Error","slice","Number","nodes","map","options","assign","parseURL","parseInt","db","resolveTLSProfile","uniqueHostsMap","forEach","keys","filter","isIP","records","recordsByPriority","record","hasOwnProperty","priority","totalWeight","weight","push","recordsGroup","length","shift","random","Math","floor","total","i","entries","splice","component","nodeConnectionName","prefix"],"sources":["C:/rgraph/node_modules/ioredis/built/cluster/util.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getConnectionName = exports.weightSrvRecords = exports.groupSrvRecords = exports.getUniqueHostnamesFromOptions = exports.normalizeNodeOptions = exports.nodeKeyToRedisOptions = exports.getNodeKey = void 0;\nconst utils_1 = require(\"../utils\");\nconst net_1 = require(\"net\");\nfunction getNodeKey(node) {\n    node.port = node.port || 6379;\n    node.host = node.host || \"127.0.0.1\";\n    return node.host + \":\" + node.port;\n}\nexports.getNodeKey = getNodeKey;\nfunction nodeKeyToRedisOptions(nodeKey) {\n    const portIndex = nodeKey.lastIndexOf(\":\");\n    if (portIndex === -1) {\n        throw new Error(`Invalid node key ${nodeKey}`);\n    }\n    return {\n        host: nodeKey.slice(0, portIndex),\n        port: Number(nodeKey.slice(portIndex + 1)),\n    };\n}\nexports.nodeKeyToRedisOptions = nodeKeyToRedisOptions;\nfunction normalizeNodeOptions(nodes) {\n    return nodes.map((node) => {\n        const options = {};\n        if (typeof node === \"object\") {\n            Object.assign(options, node);\n        }\n        else if (typeof node === \"string\") {\n            Object.assign(options, (0, utils_1.parseURL)(node));\n        }\n        else if (typeof node === \"number\") {\n            options.port = node;\n        }\n        else {\n            throw new Error(\"Invalid argument \" + node);\n        }\n        if (typeof options.port === \"string\") {\n            options.port = parseInt(options.port, 10);\n        }\n        // Cluster mode only support db 0\n        delete options.db;\n        if (!options.port) {\n            options.port = 6379;\n        }\n        if (!options.host) {\n            options.host = \"127.0.0.1\";\n        }\n        return (0, utils_1.resolveTLSProfile)(options);\n    });\n}\nexports.normalizeNodeOptions = normalizeNodeOptions;\nfunction getUniqueHostnamesFromOptions(nodes) {\n    const uniqueHostsMap = {};\n    nodes.forEach((node) => {\n        uniqueHostsMap[node.host] = true;\n    });\n    return Object.keys(uniqueHostsMap).filter((host) => !(0, net_1.isIP)(host));\n}\nexports.getUniqueHostnamesFromOptions = getUniqueHostnamesFromOptions;\nfunction groupSrvRecords(records) {\n    const recordsByPriority = {};\n    for (const record of records) {\n        if (!recordsByPriority.hasOwnProperty(record.priority)) {\n            recordsByPriority[record.priority] = {\n                totalWeight: record.weight,\n                records: [record],\n            };\n        }\n        else {\n            recordsByPriority[record.priority].totalWeight += record.weight;\n            recordsByPriority[record.priority].records.push(record);\n        }\n    }\n    return recordsByPriority;\n}\nexports.groupSrvRecords = groupSrvRecords;\nfunction weightSrvRecords(recordsGroup) {\n    if (recordsGroup.records.length === 1) {\n        recordsGroup.totalWeight = 0;\n        return recordsGroup.records.shift();\n    }\n    // + `recordsGroup.records.length` to support `weight` 0\n    const random = Math.floor(Math.random() * (recordsGroup.totalWeight + recordsGroup.records.length));\n    let total = 0;\n    for (const [i, record] of recordsGroup.records.entries()) {\n        total += 1 + record.weight;\n        if (total > random) {\n            recordsGroup.totalWeight -= record.weight;\n            recordsGroup.records.splice(i, 1);\n            return record;\n        }\n    }\n}\nexports.weightSrvRecords = weightSrvRecords;\nfunction getConnectionName(component, nodeConnectionName) {\n    const prefix = `ioredis-cluster(${component})`;\n    return nodeConnectionName ? `${prefix}:${nodeConnectionName}` : prefix;\n}\nexports.getConnectionName = getConnectionName;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}