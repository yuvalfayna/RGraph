{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transformReply = exports.RedisClusterNodeLinkStates = exports.transformArguments = void 0;\nfunction transformArguments() {\n  return ['CLUSTER', 'NODES'];\n}\nexports.transformArguments = transformArguments;\nvar RedisClusterNodeLinkStates;\n(function (RedisClusterNodeLinkStates) {\n  RedisClusterNodeLinkStates[\"CONNECTED\"] = \"connected\";\n  RedisClusterNodeLinkStates[\"DISCONNECTED\"] = \"disconnected\";\n})(RedisClusterNodeLinkStates || (exports.RedisClusterNodeLinkStates = RedisClusterNodeLinkStates = {}));\nfunction transformReply(reply) {\n  const lines = reply.split('\\n');\n  lines.pop(); // last line is empty\n  const mastersMap = new Map(),\n    replicasMap = new Map();\n  for (const line of lines) {\n    const [id, address, flags, masterId, pingSent, pongRecv, configEpoch, linkState, ...slots] = line.split(' '),\n      node = {\n        id,\n        address,\n        ...transformNodeAddress(address),\n        flags: flags.split(','),\n        pingSent: Number(pingSent),\n        pongRecv: Number(pongRecv),\n        configEpoch: Number(configEpoch),\n        linkState: linkState\n      };\n    if (masterId === '-') {\n      let replicas = replicasMap.get(id);\n      if (!replicas) {\n        replicas = [];\n        replicasMap.set(id, replicas);\n      }\n      mastersMap.set(id, {\n        ...node,\n        slots: slots.map(slot => {\n          // TODO: importing & exporting (https://redis.io/commands/cluster-nodes#special-slot-entries)\n          const [fromString, toString] = slot.split('-', 2),\n            from = Number(fromString);\n          return {\n            from,\n            to: toString ? Number(toString) : from\n          };\n        }),\n        replicas\n      });\n    } else {\n      const replicas = replicasMap.get(masterId);\n      if (!replicas) {\n        replicasMap.set(masterId, [node]);\n      } else {\n        replicas.push(node);\n      }\n    }\n  }\n  return [...mastersMap.values()];\n}\nexports.transformReply = transformReply;\nfunction transformNodeAddress(address) {\n  const indexOfColon = address.lastIndexOf(':'),\n    indexOfAt = address.indexOf('@', indexOfColon),\n    host = address.substring(0, indexOfColon);\n  if (indexOfAt === -1) {\n    return {\n      host,\n      port: Number(address.substring(indexOfColon + 1)),\n      cport: null\n    };\n  }\n  return {\n    host: address.substring(0, indexOfColon),\n    port: Number(address.substring(indexOfColon + 1, indexOfAt)),\n    cport: Number(address.substring(indexOfAt + 1))\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","transformReply","RedisClusterNodeLinkStates","transformArguments","reply","lines","split","pop","mastersMap","Map","replicasMap","line","id","address","flags","masterId","pingSent","pongRecv","configEpoch","linkState","slots","node","transformNodeAddress","Number","replicas","get","set","map","slot","fromString","toString","from","to","push","values","indexOfColon","lastIndexOf","indexOfAt","indexOf","host","substring","port","cport"],"sources":["C:/rgraph/node_modules/@redis/client/dist/lib/commands/CLUSTER_NODES.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.transformReply = exports.RedisClusterNodeLinkStates = exports.transformArguments = void 0;\nfunction transformArguments() {\n    return ['CLUSTER', 'NODES'];\n}\nexports.transformArguments = transformArguments;\nvar RedisClusterNodeLinkStates;\n(function (RedisClusterNodeLinkStates) {\n    RedisClusterNodeLinkStates[\"CONNECTED\"] = \"connected\";\n    RedisClusterNodeLinkStates[\"DISCONNECTED\"] = \"disconnected\";\n})(RedisClusterNodeLinkStates || (exports.RedisClusterNodeLinkStates = RedisClusterNodeLinkStates = {}));\nfunction transformReply(reply) {\n    const lines = reply.split('\\n');\n    lines.pop(); // last line is empty\n    const mastersMap = new Map(), replicasMap = new Map();\n    for (const line of lines) {\n        const [id, address, flags, masterId, pingSent, pongRecv, configEpoch, linkState, ...slots] = line.split(' '), node = {\n            id,\n            address,\n            ...transformNodeAddress(address),\n            flags: flags.split(','),\n            pingSent: Number(pingSent),\n            pongRecv: Number(pongRecv),\n            configEpoch: Number(configEpoch),\n            linkState: linkState\n        };\n        if (masterId === '-') {\n            let replicas = replicasMap.get(id);\n            if (!replicas) {\n                replicas = [];\n                replicasMap.set(id, replicas);\n            }\n            mastersMap.set(id, {\n                ...node,\n                slots: slots.map(slot => {\n                    // TODO: importing & exporting (https://redis.io/commands/cluster-nodes#special-slot-entries)\n                    const [fromString, toString] = slot.split('-', 2), from = Number(fromString);\n                    return {\n                        from,\n                        to: toString ? Number(toString) : from\n                    };\n                }),\n                replicas\n            });\n        }\n        else {\n            const replicas = replicasMap.get(masterId);\n            if (!replicas) {\n                replicasMap.set(masterId, [node]);\n            }\n            else {\n                replicas.push(node);\n            }\n        }\n    }\n    return [...mastersMap.values()];\n}\nexports.transformReply = transformReply;\nfunction transformNodeAddress(address) {\n    const indexOfColon = address.lastIndexOf(':'), indexOfAt = address.indexOf('@', indexOfColon), host = address.substring(0, indexOfColon);\n    if (indexOfAt === -1) {\n        return {\n            host,\n            port: Number(address.substring(indexOfColon + 1)),\n            cport: null\n        };\n    }\n    return {\n        host: address.substring(0, indexOfColon),\n        port: Number(address.substring(indexOfColon + 1, indexOfAt)),\n        cport: Number(address.substring(indexOfAt + 1))\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}