{"ast":null,"code":"\"use strict\";\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar _RedisSocket_instances, _a, _RedisSocket_initiateOptions, _RedisSocket_isTlsSocket, _RedisSocket_initiator, _RedisSocket_options, _RedisSocket_socket, _RedisSocket_isOpen, _RedisSocket_isReady, _RedisSocket_writableNeedDrain, _RedisSocket_isSocketUnrefed, _RedisSocket_reconnectStrategy, _RedisSocket_shouldReconnect, _RedisSocket_connect, _RedisSocket_createSocket, _RedisSocket_createNetSocket, _RedisSocket_createTlsSocket, _RedisSocket_onSocketError, _RedisSocket_disconnect, _RedisSocket_isCorked;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst events_1 = require(\"events\");\nconst net = require(\"net\");\nconst tls = require(\"tls\");\nconst errors_1 = require(\"../errors\");\nconst utils_1 = require(\"../utils\");\nclass RedisSocket extends events_1.EventEmitter {\n  get isOpen() {\n    return __classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\");\n  }\n  get isReady() {\n    return __classPrivateFieldGet(this, _RedisSocket_isReady, \"f\");\n  }\n  get writableNeedDrain() {\n    return __classPrivateFieldGet(this, _RedisSocket_writableNeedDrain, \"f\");\n  }\n  constructor(initiator, options) {\n    super();\n    _RedisSocket_instances.add(this);\n    _RedisSocket_initiator.set(this, void 0);\n    _RedisSocket_options.set(this, void 0);\n    _RedisSocket_socket.set(this, void 0);\n    _RedisSocket_isOpen.set(this, false);\n    _RedisSocket_isReady.set(this, false);\n    // `writable.writableNeedDrain` was added in v15.2.0 and therefore can't be used\n    // https://nodejs.org/api/stream.html#stream_writable_writableneeddrain\n    _RedisSocket_writableNeedDrain.set(this, false);\n    _RedisSocket_isSocketUnrefed.set(this, false);\n    _RedisSocket_isCorked.set(this, false);\n    __classPrivateFieldSet(this, _RedisSocket_initiator, initiator, \"f\");\n    __classPrivateFieldSet(this, _RedisSocket_options, __classPrivateFieldGet(_a, _a, \"m\", _RedisSocket_initiateOptions).call(_a, options), \"f\");\n  }\n  async connect() {\n    if (__classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\")) {\n      throw new Error('Socket already opened');\n    }\n    __classPrivateFieldSet(this, _RedisSocket_isOpen, true, \"f\");\n    return __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_connect).call(this);\n  }\n  writeCommand(args) {\n    if (!__classPrivateFieldGet(this, _RedisSocket_socket, \"f\")) {\n      throw new errors_1.ClientClosedError();\n    }\n    for (const toWrite of args) {\n      __classPrivateFieldSet(this, _RedisSocket_writableNeedDrain, !__classPrivateFieldGet(this, _RedisSocket_socket, \"f\").write(toWrite), \"f\");\n    }\n  }\n  disconnect() {\n    if (!__classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\")) {\n      throw new errors_1.ClientClosedError();\n    }\n    __classPrivateFieldSet(this, _RedisSocket_isOpen, false, \"f\");\n    __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_disconnect).call(this);\n  }\n  async quit(fn) {\n    if (!__classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\")) {\n      throw new errors_1.ClientClosedError();\n    }\n    __classPrivateFieldSet(this, _RedisSocket_isOpen, false, \"f\");\n    const reply = await fn();\n    __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_disconnect).call(this);\n    return reply;\n  }\n  cork() {\n    if (!__classPrivateFieldGet(this, _RedisSocket_socket, \"f\") || __classPrivateFieldGet(this, _RedisSocket_isCorked, \"f\")) {\n      return;\n    }\n    __classPrivateFieldGet(this, _RedisSocket_socket, \"f\").cork();\n    __classPrivateFieldSet(this, _RedisSocket_isCorked, true, \"f\");\n    setImmediate(() => {\n      __classPrivateFieldGet(this, _RedisSocket_socket, \"f\")?.uncork();\n      __classPrivateFieldSet(this, _RedisSocket_isCorked, false, \"f\");\n    });\n  }\n  ref() {\n    __classPrivateFieldSet(this, _RedisSocket_isSocketUnrefed, false, \"f\");\n    __classPrivateFieldGet(this, _RedisSocket_socket, \"f\")?.ref();\n  }\n  unref() {\n    __classPrivateFieldSet(this, _RedisSocket_isSocketUnrefed, true, \"f\");\n    __classPrivateFieldGet(this, _RedisSocket_socket, \"f\")?.unref();\n  }\n}\n_a = RedisSocket, _RedisSocket_initiator = new WeakMap(), _RedisSocket_options = new WeakMap(), _RedisSocket_socket = new WeakMap(), _RedisSocket_isOpen = new WeakMap(), _RedisSocket_isReady = new WeakMap(), _RedisSocket_writableNeedDrain = new WeakMap(), _RedisSocket_isSocketUnrefed = new WeakMap(), _RedisSocket_isCorked = new WeakMap(), _RedisSocket_instances = new WeakSet(), _RedisSocket_initiateOptions = function _RedisSocket_initiateOptions(options) {\n  var _b, _c;\n  options ?? (options = {});\n  if (!options.path) {\n    (_b = options).port ?? (_b.port = 6379);\n    (_c = options).host ?? (_c.host = 'localhost');\n  }\n  options.connectTimeout ?? (options.connectTimeout = 5000);\n  options.keepAlive ?? (options.keepAlive = 5000);\n  options.noDelay ?? (options.noDelay = true);\n  return options;\n}, _RedisSocket_isTlsSocket = function _RedisSocket_isTlsSocket(options) {\n  return options.tls === true;\n}, _RedisSocket_reconnectStrategy = function _RedisSocket_reconnectStrategy(retries, cause) {\n  if (__classPrivateFieldGet(this, _RedisSocket_options, \"f\").reconnectStrategy === false) {\n    return false;\n  } else if (typeof __classPrivateFieldGet(this, _RedisSocket_options, \"f\").reconnectStrategy === 'number') {\n    return __classPrivateFieldGet(this, _RedisSocket_options, \"f\").reconnectStrategy;\n  } else if (__classPrivateFieldGet(this, _RedisSocket_options, \"f\").reconnectStrategy) {\n    try {\n      const retryIn = __classPrivateFieldGet(this, _RedisSocket_options, \"f\").reconnectStrategy(retries, cause);\n      if (retryIn !== false && !(retryIn instanceof Error) && typeof retryIn !== 'number') {\n        throw new TypeError(`Reconnect strategy should return \\`false | Error | number\\`, got ${retryIn} instead`);\n      }\n      return retryIn;\n    } catch (err) {\n      this.emit('error', err);\n    }\n  }\n  return Math.min(retries * 50, 500);\n}, _RedisSocket_shouldReconnect = function _RedisSocket_shouldReconnect(retries, cause) {\n  const retryIn = __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_reconnectStrategy).call(this, retries, cause);\n  if (retryIn === false) {\n    __classPrivateFieldSet(this, _RedisSocket_isOpen, false, \"f\");\n    this.emit('error', cause);\n    return cause;\n  } else if (retryIn instanceof Error) {\n    __classPrivateFieldSet(this, _RedisSocket_isOpen, false, \"f\");\n    this.emit('error', cause);\n    return new errors_1.ReconnectStrategyError(retryIn, cause);\n  }\n  return retryIn;\n}, _RedisSocket_connect = async function _RedisSocket_connect() {\n  let retries = 0;\n  do {\n    try {\n      __classPrivateFieldSet(this, _RedisSocket_socket, await __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_createSocket).call(this), \"f\");\n      __classPrivateFieldSet(this, _RedisSocket_writableNeedDrain, false, \"f\");\n      this.emit('connect');\n      try {\n        await __classPrivateFieldGet(this, _RedisSocket_initiator, \"f\").call(this);\n      } catch (err) {\n        __classPrivateFieldGet(this, _RedisSocket_socket, \"f\").destroy();\n        __classPrivateFieldSet(this, _RedisSocket_socket, undefined, \"f\");\n        throw err;\n      }\n      __classPrivateFieldSet(this, _RedisSocket_isReady, true, \"f\");\n      this.emit('ready');\n    } catch (err) {\n      const retryIn = __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_shouldReconnect).call(this, retries++, err);\n      if (typeof retryIn !== 'number') {\n        throw retryIn;\n      }\n      this.emit('error', err);\n      await (0, utils_1.promiseTimeout)(retryIn);\n      this.emit('reconnecting');\n    }\n  } while (__classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\") && !__classPrivateFieldGet(this, _RedisSocket_isReady, \"f\"));\n}, _RedisSocket_createSocket = function _RedisSocket_createSocket() {\n  return new Promise((resolve, reject) => {\n    const {\n      connectEvent,\n      socket\n    } = __classPrivateFieldGet(_a, _a, \"m\", _RedisSocket_isTlsSocket).call(_a, __classPrivateFieldGet(this, _RedisSocket_options, \"f\")) ? __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_createTlsSocket).call(this) : __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_createNetSocket).call(this);\n    if (__classPrivateFieldGet(this, _RedisSocket_options, \"f\").connectTimeout) {\n      socket.setTimeout(__classPrivateFieldGet(this, _RedisSocket_options, \"f\").connectTimeout, () => socket.destroy(new errors_1.ConnectionTimeoutError()));\n    }\n    if (__classPrivateFieldGet(this, _RedisSocket_isSocketUnrefed, \"f\")) {\n      socket.unref();\n    }\n    socket.setNoDelay(__classPrivateFieldGet(this, _RedisSocket_options, \"f\").noDelay).once('error', reject).once(connectEvent, () => {\n      socket.setTimeout(0)\n      // https://github.com/nodejs/node/issues/31663\n      .setKeepAlive(__classPrivateFieldGet(this, _RedisSocket_options, \"f\").keepAlive !== false, __classPrivateFieldGet(this, _RedisSocket_options, \"f\").keepAlive || 0).off('error', reject).once('error', err => __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_onSocketError).call(this, err)).once('close', hadError => {\n        if (!hadError && __classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\") && __classPrivateFieldGet(this, _RedisSocket_socket, \"f\") === socket) {\n          __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_onSocketError).call(this, new errors_1.SocketClosedUnexpectedlyError());\n        }\n      }).on('drain', () => {\n        __classPrivateFieldSet(this, _RedisSocket_writableNeedDrain, false, \"f\");\n        this.emit('drain');\n      }).on('data', data => this.emit('data', data));\n      resolve(socket);\n    });\n  });\n}, _RedisSocket_createNetSocket = function _RedisSocket_createNetSocket() {\n  return {\n    connectEvent: 'connect',\n    socket: net.connect(__classPrivateFieldGet(this, _RedisSocket_options, \"f\")) // TODO\n  };\n}, _RedisSocket_createTlsSocket = function _RedisSocket_createTlsSocket() {\n  return {\n    connectEvent: 'secureConnect',\n    socket: tls.connect(__classPrivateFieldGet(this, _RedisSocket_options, \"f\")) // TODO\n  };\n}, _RedisSocket_onSocketError = function _RedisSocket_onSocketError(err) {\n  const wasReady = __classPrivateFieldGet(this, _RedisSocket_isReady, \"f\");\n  __classPrivateFieldSet(this, _RedisSocket_isReady, false, \"f\");\n  this.emit('error', err);\n  if (!wasReady || !__classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\") || typeof __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_shouldReconnect).call(this, 0, err) !== 'number') return;\n  this.emit('reconnecting');\n  __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_connect).call(this).catch(() => {\n    // the error was already emitted, silently ignore it\n  });\n}, _RedisSocket_disconnect = function _RedisSocket_disconnect() {\n  __classPrivateFieldSet(this, _RedisSocket_isReady, false, \"f\");\n  if (__classPrivateFieldGet(this, _RedisSocket_socket, \"f\")) {\n    __classPrivateFieldGet(this, _RedisSocket_socket, \"f\").destroy();\n    __classPrivateFieldSet(this, _RedisSocket_socket, undefined, \"f\");\n  }\n  this.emit('end');\n};\nexports.default = RedisSocket;","map":{"version":3,"names":["__classPrivateFieldGet","receiver","state","kind","f","TypeError","has","call","value","get","__classPrivateFieldSet","set","_RedisSocket_instances","_a","_RedisSocket_initiateOptions","_RedisSocket_isTlsSocket","_RedisSocket_initiator","_RedisSocket_options","_RedisSocket_socket","_RedisSocket_isOpen","_RedisSocket_isReady","_RedisSocket_writableNeedDrain","_RedisSocket_isSocketUnrefed","_RedisSocket_reconnectStrategy","_RedisSocket_shouldReconnect","_RedisSocket_connect","_RedisSocket_createSocket","_RedisSocket_createNetSocket","_RedisSocket_createTlsSocket","_RedisSocket_onSocketError","_RedisSocket_disconnect","_RedisSocket_isCorked","Object","defineProperty","exports","events_1","require","net","tls","errors_1","utils_1","RedisSocket","EventEmitter","isOpen","isReady","writableNeedDrain","constructor","initiator","options","add","connect","Error","writeCommand","args","ClientClosedError","toWrite","write","disconnect","quit","fn","reply","cork","setImmediate","uncork","ref","unref","WeakMap","WeakSet","_b","_c","path","port","host","connectTimeout","keepAlive","noDelay","retries","cause","reconnectStrategy","retryIn","err","emit","Math","min","ReconnectStrategyError","destroy","undefined","promiseTimeout","Promise","resolve","reject","connectEvent","socket","setTimeout","ConnectionTimeoutError","setNoDelay","once","setKeepAlive","off","hadError","SocketClosedUnexpectedlyError","on","data","wasReady","catch","default"],"sources":["C:/rgraph/node_modules/@redis/client/dist/lib/client/socket.js"],"sourcesContent":["\"use strict\";\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _RedisSocket_instances, _a, _RedisSocket_initiateOptions, _RedisSocket_isTlsSocket, _RedisSocket_initiator, _RedisSocket_options, _RedisSocket_socket, _RedisSocket_isOpen, _RedisSocket_isReady, _RedisSocket_writableNeedDrain, _RedisSocket_isSocketUnrefed, _RedisSocket_reconnectStrategy, _RedisSocket_shouldReconnect, _RedisSocket_connect, _RedisSocket_createSocket, _RedisSocket_createNetSocket, _RedisSocket_createTlsSocket, _RedisSocket_onSocketError, _RedisSocket_disconnect, _RedisSocket_isCorked;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst events_1 = require(\"events\");\nconst net = require(\"net\");\nconst tls = require(\"tls\");\nconst errors_1 = require(\"../errors\");\nconst utils_1 = require(\"../utils\");\nclass RedisSocket extends events_1.EventEmitter {\n    get isOpen() {\n        return __classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\");\n    }\n    get isReady() {\n        return __classPrivateFieldGet(this, _RedisSocket_isReady, \"f\");\n    }\n    get writableNeedDrain() {\n        return __classPrivateFieldGet(this, _RedisSocket_writableNeedDrain, \"f\");\n    }\n    constructor(initiator, options) {\n        super();\n        _RedisSocket_instances.add(this);\n        _RedisSocket_initiator.set(this, void 0);\n        _RedisSocket_options.set(this, void 0);\n        _RedisSocket_socket.set(this, void 0);\n        _RedisSocket_isOpen.set(this, false);\n        _RedisSocket_isReady.set(this, false);\n        // `writable.writableNeedDrain` was added in v15.2.0 and therefore can't be used\n        // https://nodejs.org/api/stream.html#stream_writable_writableneeddrain\n        _RedisSocket_writableNeedDrain.set(this, false);\n        _RedisSocket_isSocketUnrefed.set(this, false);\n        _RedisSocket_isCorked.set(this, false);\n        __classPrivateFieldSet(this, _RedisSocket_initiator, initiator, \"f\");\n        __classPrivateFieldSet(this, _RedisSocket_options, __classPrivateFieldGet(_a, _a, \"m\", _RedisSocket_initiateOptions).call(_a, options), \"f\");\n    }\n    async connect() {\n        if (__classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\")) {\n            throw new Error('Socket already opened');\n        }\n        __classPrivateFieldSet(this, _RedisSocket_isOpen, true, \"f\");\n        return __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_connect).call(this);\n    }\n    writeCommand(args) {\n        if (!__classPrivateFieldGet(this, _RedisSocket_socket, \"f\")) {\n            throw new errors_1.ClientClosedError();\n        }\n        for (const toWrite of args) {\n            __classPrivateFieldSet(this, _RedisSocket_writableNeedDrain, !__classPrivateFieldGet(this, _RedisSocket_socket, \"f\").write(toWrite), \"f\");\n        }\n    }\n    disconnect() {\n        if (!__classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\")) {\n            throw new errors_1.ClientClosedError();\n        }\n        __classPrivateFieldSet(this, _RedisSocket_isOpen, false, \"f\");\n        __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_disconnect).call(this);\n    }\n    async quit(fn) {\n        if (!__classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\")) {\n            throw new errors_1.ClientClosedError();\n        }\n        __classPrivateFieldSet(this, _RedisSocket_isOpen, false, \"f\");\n        const reply = await fn();\n        __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_disconnect).call(this);\n        return reply;\n    }\n    cork() {\n        if (!__classPrivateFieldGet(this, _RedisSocket_socket, \"f\") || __classPrivateFieldGet(this, _RedisSocket_isCorked, \"f\")) {\n            return;\n        }\n        __classPrivateFieldGet(this, _RedisSocket_socket, \"f\").cork();\n        __classPrivateFieldSet(this, _RedisSocket_isCorked, true, \"f\");\n        setImmediate(() => {\n            __classPrivateFieldGet(this, _RedisSocket_socket, \"f\")?.uncork();\n            __classPrivateFieldSet(this, _RedisSocket_isCorked, false, \"f\");\n        });\n    }\n    ref() {\n        __classPrivateFieldSet(this, _RedisSocket_isSocketUnrefed, false, \"f\");\n        __classPrivateFieldGet(this, _RedisSocket_socket, \"f\")?.ref();\n    }\n    unref() {\n        __classPrivateFieldSet(this, _RedisSocket_isSocketUnrefed, true, \"f\");\n        __classPrivateFieldGet(this, _RedisSocket_socket, \"f\")?.unref();\n    }\n}\n_a = RedisSocket, _RedisSocket_initiator = new WeakMap(), _RedisSocket_options = new WeakMap(), _RedisSocket_socket = new WeakMap(), _RedisSocket_isOpen = new WeakMap(), _RedisSocket_isReady = new WeakMap(), _RedisSocket_writableNeedDrain = new WeakMap(), _RedisSocket_isSocketUnrefed = new WeakMap(), _RedisSocket_isCorked = new WeakMap(), _RedisSocket_instances = new WeakSet(), _RedisSocket_initiateOptions = function _RedisSocket_initiateOptions(options) {\n    var _b, _c;\n    options ?? (options = {});\n    if (!options.path) {\n        (_b = options).port ?? (_b.port = 6379);\n        (_c = options).host ?? (_c.host = 'localhost');\n    }\n    options.connectTimeout ?? (options.connectTimeout = 5000);\n    options.keepAlive ?? (options.keepAlive = 5000);\n    options.noDelay ?? (options.noDelay = true);\n    return options;\n}, _RedisSocket_isTlsSocket = function _RedisSocket_isTlsSocket(options) {\n    return options.tls === true;\n}, _RedisSocket_reconnectStrategy = function _RedisSocket_reconnectStrategy(retries, cause) {\n    if (__classPrivateFieldGet(this, _RedisSocket_options, \"f\").reconnectStrategy === false) {\n        return false;\n    }\n    else if (typeof __classPrivateFieldGet(this, _RedisSocket_options, \"f\").reconnectStrategy === 'number') {\n        return __classPrivateFieldGet(this, _RedisSocket_options, \"f\").reconnectStrategy;\n    }\n    else if (__classPrivateFieldGet(this, _RedisSocket_options, \"f\").reconnectStrategy) {\n        try {\n            const retryIn = __classPrivateFieldGet(this, _RedisSocket_options, \"f\").reconnectStrategy(retries, cause);\n            if (retryIn !== false && !(retryIn instanceof Error) && typeof retryIn !== 'number') {\n                throw new TypeError(`Reconnect strategy should return \\`false | Error | number\\`, got ${retryIn} instead`);\n            }\n            return retryIn;\n        }\n        catch (err) {\n            this.emit('error', err);\n        }\n    }\n    return Math.min(retries * 50, 500);\n}, _RedisSocket_shouldReconnect = function _RedisSocket_shouldReconnect(retries, cause) {\n    const retryIn = __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_reconnectStrategy).call(this, retries, cause);\n    if (retryIn === false) {\n        __classPrivateFieldSet(this, _RedisSocket_isOpen, false, \"f\");\n        this.emit('error', cause);\n        return cause;\n    }\n    else if (retryIn instanceof Error) {\n        __classPrivateFieldSet(this, _RedisSocket_isOpen, false, \"f\");\n        this.emit('error', cause);\n        return new errors_1.ReconnectStrategyError(retryIn, cause);\n    }\n    return retryIn;\n}, _RedisSocket_connect = async function _RedisSocket_connect() {\n    let retries = 0;\n    do {\n        try {\n            __classPrivateFieldSet(this, _RedisSocket_socket, await __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_createSocket).call(this), \"f\");\n            __classPrivateFieldSet(this, _RedisSocket_writableNeedDrain, false, \"f\");\n            this.emit('connect');\n            try {\n                await __classPrivateFieldGet(this, _RedisSocket_initiator, \"f\").call(this);\n            }\n            catch (err) {\n                __classPrivateFieldGet(this, _RedisSocket_socket, \"f\").destroy();\n                __classPrivateFieldSet(this, _RedisSocket_socket, undefined, \"f\");\n                throw err;\n            }\n            __classPrivateFieldSet(this, _RedisSocket_isReady, true, \"f\");\n            this.emit('ready');\n        }\n        catch (err) {\n            const retryIn = __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_shouldReconnect).call(this, retries++, err);\n            if (typeof retryIn !== 'number') {\n                throw retryIn;\n            }\n            this.emit('error', err);\n            await (0, utils_1.promiseTimeout)(retryIn);\n            this.emit('reconnecting');\n        }\n    } while (__classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\") && !__classPrivateFieldGet(this, _RedisSocket_isReady, \"f\"));\n}, _RedisSocket_createSocket = function _RedisSocket_createSocket() {\n    return new Promise((resolve, reject) => {\n        const { connectEvent, socket } = __classPrivateFieldGet(_a, _a, \"m\", _RedisSocket_isTlsSocket).call(_a, __classPrivateFieldGet(this, _RedisSocket_options, \"f\")) ?\n            __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_createTlsSocket).call(this) :\n            __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_createNetSocket).call(this);\n        if (__classPrivateFieldGet(this, _RedisSocket_options, \"f\").connectTimeout) {\n            socket.setTimeout(__classPrivateFieldGet(this, _RedisSocket_options, \"f\").connectTimeout, () => socket.destroy(new errors_1.ConnectionTimeoutError()));\n        }\n        if (__classPrivateFieldGet(this, _RedisSocket_isSocketUnrefed, \"f\")) {\n            socket.unref();\n        }\n        socket\n            .setNoDelay(__classPrivateFieldGet(this, _RedisSocket_options, \"f\").noDelay)\n            .once('error', reject)\n            .once(connectEvent, () => {\n            socket\n                .setTimeout(0)\n                // https://github.com/nodejs/node/issues/31663\n                .setKeepAlive(__classPrivateFieldGet(this, _RedisSocket_options, \"f\").keepAlive !== false, __classPrivateFieldGet(this, _RedisSocket_options, \"f\").keepAlive || 0)\n                .off('error', reject)\n                .once('error', (err) => __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_onSocketError).call(this, err))\n                .once('close', hadError => {\n                if (!hadError && __classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\") && __classPrivateFieldGet(this, _RedisSocket_socket, \"f\") === socket) {\n                    __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_onSocketError).call(this, new errors_1.SocketClosedUnexpectedlyError());\n                }\n            })\n                .on('drain', () => {\n                __classPrivateFieldSet(this, _RedisSocket_writableNeedDrain, false, \"f\");\n                this.emit('drain');\n            })\n                .on('data', data => this.emit('data', data));\n            resolve(socket);\n        });\n    });\n}, _RedisSocket_createNetSocket = function _RedisSocket_createNetSocket() {\n    return {\n        connectEvent: 'connect',\n        socket: net.connect(__classPrivateFieldGet(this, _RedisSocket_options, \"f\")) // TODO\n    };\n}, _RedisSocket_createTlsSocket = function _RedisSocket_createTlsSocket() {\n    return {\n        connectEvent: 'secureConnect',\n        socket: tls.connect(__classPrivateFieldGet(this, _RedisSocket_options, \"f\")) // TODO\n    };\n}, _RedisSocket_onSocketError = function _RedisSocket_onSocketError(err) {\n    const wasReady = __classPrivateFieldGet(this, _RedisSocket_isReady, \"f\");\n    __classPrivateFieldSet(this, _RedisSocket_isReady, false, \"f\");\n    this.emit('error', err);\n    if (!wasReady || !__classPrivateFieldGet(this, _RedisSocket_isOpen, \"f\") || typeof __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_shouldReconnect).call(this, 0, err) !== 'number')\n        return;\n    this.emit('reconnecting');\n    __classPrivateFieldGet(this, _RedisSocket_instances, \"m\", _RedisSocket_connect).call(this).catch(() => {\n        // the error was already emitted, silently ignore it\n    });\n}, _RedisSocket_disconnect = function _RedisSocket_disconnect() {\n    __classPrivateFieldSet(this, _RedisSocket_isReady, false, \"f\");\n    if (__classPrivateFieldGet(this, _RedisSocket_socket, \"f\")) {\n        __classPrivateFieldGet(this, _RedisSocket_socket, \"f\").destroy();\n        __classPrivateFieldSet(this, _RedisSocket_socket, undefined, \"f\");\n    }\n    this.emit('end');\n};\nexports.default = RedisSocket;\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,sBAAsB,GAAI,IAAI,IAAI,IAAI,CAACA,sBAAsB,IAAK,UAAUC,QAAQ,EAAEC,KAAK,EAAEC,IAAI,EAAEC,CAAC,EAAE;EACtG,IAAID,IAAI,KAAK,GAAG,IAAI,CAACC,CAAC,EAAE,MAAM,IAAIC,SAAS,CAAC,+CAA+C,CAAC;EAC5F,IAAI,OAAOH,KAAK,KAAK,UAAU,GAAGD,QAAQ,KAAKC,KAAK,IAAI,CAACE,CAAC,GAAG,CAACF,KAAK,CAACI,GAAG,CAACL,QAAQ,CAAC,EAAE,MAAM,IAAII,SAAS,CAAC,0EAA0E,CAAC;EAClL,OAAOF,IAAI,KAAK,GAAG,GAAGC,CAAC,GAAGD,IAAI,KAAK,GAAG,GAAGC,CAAC,CAACG,IAAI,CAACN,QAAQ,CAAC,GAAGG,CAAC,GAAGA,CAAC,CAACI,KAAK,GAAGN,KAAK,CAACO,GAAG,CAACR,QAAQ,CAAC;AACjG,CAAC;AACD,IAAIS,sBAAsB,GAAI,IAAI,IAAI,IAAI,CAACA,sBAAsB,IAAK,UAAUT,QAAQ,EAAEC,KAAK,EAAEM,KAAK,EAAEL,IAAI,EAAEC,CAAC,EAAE;EAC7G,IAAID,IAAI,KAAK,GAAG,EAAE,MAAM,IAAIE,SAAS,CAAC,gCAAgC,CAAC;EACvE,IAAIF,IAAI,KAAK,GAAG,IAAI,CAACC,CAAC,EAAE,MAAM,IAAIC,SAAS,CAAC,+CAA+C,CAAC;EAC5F,IAAI,OAAOH,KAAK,KAAK,UAAU,GAAGD,QAAQ,KAAKC,KAAK,IAAI,CAACE,CAAC,GAAG,CAACF,KAAK,CAACI,GAAG,CAACL,QAAQ,CAAC,EAAE,MAAM,IAAII,SAAS,CAAC,yEAAyE,CAAC;EACjL,OAAQF,IAAI,KAAK,GAAG,GAAGC,CAAC,CAACG,IAAI,CAACN,QAAQ,EAAEO,KAAK,CAAC,GAAGJ,CAAC,GAAGA,CAAC,CAACI,KAAK,GAAGA,KAAK,GAAGN,KAAK,CAACS,GAAG,CAACV,QAAQ,EAAEO,KAAK,CAAC,EAAGA,KAAK;AAC7G,CAAC;AACD,IAAII,sBAAsB,EAAEC,EAAE,EAAEC,4BAA4B,EAAEC,wBAAwB,EAAEC,sBAAsB,EAAEC,oBAAoB,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAEC,oBAAoB,EAAEC,8BAA8B,EAAEC,4BAA4B,EAAEC,8BAA8B,EAAEC,4BAA4B,EAAEC,oBAAoB,EAAEC,yBAAyB,EAAEC,4BAA4B,EAAEC,4BAA4B,EAAEC,0BAA0B,EAAEC,uBAAuB,EAAEC,qBAAqB;AACzfC,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAE1B,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAM2B,QAAQ,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAClC,MAAMC,GAAG,GAAGD,OAAO,CAAC,KAAK,CAAC;AAC1B,MAAME,GAAG,GAAGF,OAAO,CAAC,KAAK,CAAC;AAC1B,MAAMG,QAAQ,GAAGH,OAAO,CAAC,WAAW,CAAC;AACrC,MAAMI,OAAO,GAAGJ,OAAO,CAAC,UAAU,CAAC;AACnC,MAAMK,WAAW,SAASN,QAAQ,CAACO,YAAY,CAAC;EAC5C,IAAIC,MAAMA,CAAA,EAAG;IACT,OAAO3C,sBAAsB,CAAC,IAAI,EAAEmB,mBAAmB,EAAE,GAAG,CAAC;EACjE;EACA,IAAIyB,OAAOA,CAAA,EAAG;IACV,OAAO5C,sBAAsB,CAAC,IAAI,EAAEoB,oBAAoB,EAAE,GAAG,CAAC;EAClE;EACA,IAAIyB,iBAAiBA,CAAA,EAAG;IACpB,OAAO7C,sBAAsB,CAAC,IAAI,EAAEqB,8BAA8B,EAAE,GAAG,CAAC;EAC5E;EACAyB,WAAWA,CAACC,SAAS,EAAEC,OAAO,EAAE;IAC5B,KAAK,CAAC,CAAC;IACPpC,sBAAsB,CAACqC,GAAG,CAAC,IAAI,CAAC;IAChCjC,sBAAsB,CAACL,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACxCM,oBAAoB,CAACN,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACtCO,mBAAmB,CAACP,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACrCQ,mBAAmB,CAACR,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC;IACpCS,oBAAoB,CAACT,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC;IACrC;IACA;IACAU,8BAA8B,CAACV,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC;IAC/CW,4BAA4B,CAACX,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC;IAC7CoB,qBAAqB,CAACpB,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC;IACtCD,sBAAsB,CAAC,IAAI,EAAEM,sBAAsB,EAAE+B,SAAS,EAAE,GAAG,CAAC;IACpErC,sBAAsB,CAAC,IAAI,EAAEO,oBAAoB,EAAEjB,sBAAsB,CAACa,EAAE,EAAEA,EAAE,EAAE,GAAG,EAAEC,4BAA4B,CAAC,CAACP,IAAI,CAACM,EAAE,EAAEmC,OAAO,CAAC,EAAE,GAAG,CAAC;EAChJ;EACA,MAAME,OAAOA,CAAA,EAAG;IACZ,IAAIlD,sBAAsB,CAAC,IAAI,EAAEmB,mBAAmB,EAAE,GAAG,CAAC,EAAE;MACxD,MAAM,IAAIgC,KAAK,CAAC,uBAAuB,CAAC;IAC5C;IACAzC,sBAAsB,CAAC,IAAI,EAAES,mBAAmB,EAAE,IAAI,EAAE,GAAG,CAAC;IAC5D,OAAOnB,sBAAsB,CAAC,IAAI,EAAEY,sBAAsB,EAAE,GAAG,EAAEa,oBAAoB,CAAC,CAAClB,IAAI,CAAC,IAAI,CAAC;EACrG;EACA6C,YAAYA,CAACC,IAAI,EAAE;IACf,IAAI,CAACrD,sBAAsB,CAAC,IAAI,EAAEkB,mBAAmB,EAAE,GAAG,CAAC,EAAE;MACzD,MAAM,IAAIqB,QAAQ,CAACe,iBAAiB,CAAC,CAAC;IAC1C;IACA,KAAK,MAAMC,OAAO,IAAIF,IAAI,EAAE;MACxB3C,sBAAsB,CAAC,IAAI,EAAEW,8BAA8B,EAAE,CAACrB,sBAAsB,CAAC,IAAI,EAAEkB,mBAAmB,EAAE,GAAG,CAAC,CAACsC,KAAK,CAACD,OAAO,CAAC,EAAE,GAAG,CAAC;IAC7I;EACJ;EACAE,UAAUA,CAAA,EAAG;IACT,IAAI,CAACzD,sBAAsB,CAAC,IAAI,EAAEmB,mBAAmB,EAAE,GAAG,CAAC,EAAE;MACzD,MAAM,IAAIoB,QAAQ,CAACe,iBAAiB,CAAC,CAAC;IAC1C;IACA5C,sBAAsB,CAAC,IAAI,EAAES,mBAAmB,EAAE,KAAK,EAAE,GAAG,CAAC;IAC7DnB,sBAAsB,CAAC,IAAI,EAAEY,sBAAsB,EAAE,GAAG,EAAEkB,uBAAuB,CAAC,CAACvB,IAAI,CAAC,IAAI,CAAC;EACjG;EACA,MAAMmD,IAAIA,CAACC,EAAE,EAAE;IACX,IAAI,CAAC3D,sBAAsB,CAAC,IAAI,EAAEmB,mBAAmB,EAAE,GAAG,CAAC,EAAE;MACzD,MAAM,IAAIoB,QAAQ,CAACe,iBAAiB,CAAC,CAAC;IAC1C;IACA5C,sBAAsB,CAAC,IAAI,EAAES,mBAAmB,EAAE,KAAK,EAAE,GAAG,CAAC;IAC7D,MAAMyC,KAAK,GAAG,MAAMD,EAAE,CAAC,CAAC;IACxB3D,sBAAsB,CAAC,IAAI,EAAEY,sBAAsB,EAAE,GAAG,EAAEkB,uBAAuB,CAAC,CAACvB,IAAI,CAAC,IAAI,CAAC;IAC7F,OAAOqD,KAAK;EAChB;EACAC,IAAIA,CAAA,EAAG;IACH,IAAI,CAAC7D,sBAAsB,CAAC,IAAI,EAAEkB,mBAAmB,EAAE,GAAG,CAAC,IAAIlB,sBAAsB,CAAC,IAAI,EAAE+B,qBAAqB,EAAE,GAAG,CAAC,EAAE;MACrH;IACJ;IACA/B,sBAAsB,CAAC,IAAI,EAAEkB,mBAAmB,EAAE,GAAG,CAAC,CAAC2C,IAAI,CAAC,CAAC;IAC7DnD,sBAAsB,CAAC,IAAI,EAAEqB,qBAAqB,EAAE,IAAI,EAAE,GAAG,CAAC;IAC9D+B,YAAY,CAAC,MAAM;MACf9D,sBAAsB,CAAC,IAAI,EAAEkB,mBAAmB,EAAE,GAAG,CAAC,EAAE6C,MAAM,CAAC,CAAC;MAChErD,sBAAsB,CAAC,IAAI,EAAEqB,qBAAqB,EAAE,KAAK,EAAE,GAAG,CAAC;IACnE,CAAC,CAAC;EACN;EACAiC,GAAGA,CAAA,EAAG;IACFtD,sBAAsB,CAAC,IAAI,EAAEY,4BAA4B,EAAE,KAAK,EAAE,GAAG,CAAC;IACtEtB,sBAAsB,CAAC,IAAI,EAAEkB,mBAAmB,EAAE,GAAG,CAAC,EAAE8C,GAAG,CAAC,CAAC;EACjE;EACAC,KAAKA,CAAA,EAAG;IACJvD,sBAAsB,CAAC,IAAI,EAAEY,4BAA4B,EAAE,IAAI,EAAE,GAAG,CAAC;IACrEtB,sBAAsB,CAAC,IAAI,EAAEkB,mBAAmB,EAAE,GAAG,CAAC,EAAE+C,KAAK,CAAC,CAAC;EACnE;AACJ;AACApD,EAAE,GAAG4B,WAAW,EAAEzB,sBAAsB,GAAG,IAAIkD,OAAO,CAAC,CAAC,EAAEjD,oBAAoB,GAAG,IAAIiD,OAAO,CAAC,CAAC,EAAEhD,mBAAmB,GAAG,IAAIgD,OAAO,CAAC,CAAC,EAAE/C,mBAAmB,GAAG,IAAI+C,OAAO,CAAC,CAAC,EAAE9C,oBAAoB,GAAG,IAAI8C,OAAO,CAAC,CAAC,EAAE7C,8BAA8B,GAAG,IAAI6C,OAAO,CAAC,CAAC,EAAE5C,4BAA4B,GAAG,IAAI4C,OAAO,CAAC,CAAC,EAAEnC,qBAAqB,GAAG,IAAImC,OAAO,CAAC,CAAC,EAAEtD,sBAAsB,GAAG,IAAIuD,OAAO,CAAC,CAAC,EAAErD,4BAA4B,GAAG,SAASA,4BAA4BA,CAACkC,OAAO,EAAE;EACvc,IAAIoB,EAAE,EAAEC,EAAE;EACVrB,OAAO,KAAKA,OAAO,GAAG,CAAC,CAAC,CAAC;EACzB,IAAI,CAACA,OAAO,CAACsB,IAAI,EAAE;IACf,CAACF,EAAE,GAAGpB,OAAO,EAAEuB,IAAI,KAAKH,EAAE,CAACG,IAAI,GAAG,IAAI,CAAC;IACvC,CAACF,EAAE,GAAGrB,OAAO,EAAEwB,IAAI,KAAKH,EAAE,CAACG,IAAI,GAAG,WAAW,CAAC;EAClD;EACAxB,OAAO,CAACyB,cAAc,KAAKzB,OAAO,CAACyB,cAAc,GAAG,IAAI,CAAC;EACzDzB,OAAO,CAAC0B,SAAS,KAAK1B,OAAO,CAAC0B,SAAS,GAAG,IAAI,CAAC;EAC/C1B,OAAO,CAAC2B,OAAO,KAAK3B,OAAO,CAAC2B,OAAO,GAAG,IAAI,CAAC;EAC3C,OAAO3B,OAAO;AAClB,CAAC,EAAEjC,wBAAwB,GAAG,SAASA,wBAAwBA,CAACiC,OAAO,EAAE;EACrE,OAAOA,OAAO,CAACV,GAAG,KAAK,IAAI;AAC/B,CAAC,EAAEf,8BAA8B,GAAG,SAASA,8BAA8BA,CAACqD,OAAO,EAAEC,KAAK,EAAE;EACxF,IAAI7E,sBAAsB,CAAC,IAAI,EAAEiB,oBAAoB,EAAE,GAAG,CAAC,CAAC6D,iBAAiB,KAAK,KAAK,EAAE;IACrF,OAAO,KAAK;EAChB,CAAC,MACI,IAAI,OAAO9E,sBAAsB,CAAC,IAAI,EAAEiB,oBAAoB,EAAE,GAAG,CAAC,CAAC6D,iBAAiB,KAAK,QAAQ,EAAE;IACpG,OAAO9E,sBAAsB,CAAC,IAAI,EAAEiB,oBAAoB,EAAE,GAAG,CAAC,CAAC6D,iBAAiB;EACpF,CAAC,MACI,IAAI9E,sBAAsB,CAAC,IAAI,EAAEiB,oBAAoB,EAAE,GAAG,CAAC,CAAC6D,iBAAiB,EAAE;IAChF,IAAI;MACA,MAAMC,OAAO,GAAG/E,sBAAsB,CAAC,IAAI,EAAEiB,oBAAoB,EAAE,GAAG,CAAC,CAAC6D,iBAAiB,CAACF,OAAO,EAAEC,KAAK,CAAC;MACzG,IAAIE,OAAO,KAAK,KAAK,IAAI,EAAEA,OAAO,YAAY5B,KAAK,CAAC,IAAI,OAAO4B,OAAO,KAAK,QAAQ,EAAE;QACjF,MAAM,IAAI1E,SAAS,CAAC,oEAAoE0E,OAAO,UAAU,CAAC;MAC9G;MACA,OAAOA,OAAO;IAClB,CAAC,CACD,OAAOC,GAAG,EAAE;MACR,IAAI,CAACC,IAAI,CAAC,OAAO,EAAED,GAAG,CAAC;IAC3B;EACJ;EACA,OAAOE,IAAI,CAACC,GAAG,CAACP,OAAO,GAAG,EAAE,EAAE,GAAG,CAAC;AACtC,CAAC,EAAEpD,4BAA4B,GAAG,SAASA,4BAA4BA,CAACoD,OAAO,EAAEC,KAAK,EAAE;EACpF,MAAME,OAAO,GAAG/E,sBAAsB,CAAC,IAAI,EAAEY,sBAAsB,EAAE,GAAG,EAAEW,8BAA8B,CAAC,CAAChB,IAAI,CAAC,IAAI,EAAEqE,OAAO,EAAEC,KAAK,CAAC;EACpI,IAAIE,OAAO,KAAK,KAAK,EAAE;IACnBrE,sBAAsB,CAAC,IAAI,EAAES,mBAAmB,EAAE,KAAK,EAAE,GAAG,CAAC;IAC7D,IAAI,CAAC8D,IAAI,CAAC,OAAO,EAAEJ,KAAK,CAAC;IACzB,OAAOA,KAAK;EAChB,CAAC,MACI,IAAIE,OAAO,YAAY5B,KAAK,EAAE;IAC/BzC,sBAAsB,CAAC,IAAI,EAAES,mBAAmB,EAAE,KAAK,EAAE,GAAG,CAAC;IAC7D,IAAI,CAAC8D,IAAI,CAAC,OAAO,EAAEJ,KAAK,CAAC;IACzB,OAAO,IAAItC,QAAQ,CAAC6C,sBAAsB,CAACL,OAAO,EAAEF,KAAK,CAAC;EAC9D;EACA,OAAOE,OAAO;AAClB,CAAC,EAAEtD,oBAAoB,GAAG,eAAeA,oBAAoBA,CAAA,EAAG;EAC5D,IAAImD,OAAO,GAAG,CAAC;EACf,GAAG;IACC,IAAI;MACAlE,sBAAsB,CAAC,IAAI,EAAEQ,mBAAmB,EAAE,MAAMlB,sBAAsB,CAAC,IAAI,EAAEY,sBAAsB,EAAE,GAAG,EAAEc,yBAAyB,CAAC,CAACnB,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC;MAC7JG,sBAAsB,CAAC,IAAI,EAAEW,8BAA8B,EAAE,KAAK,EAAE,GAAG,CAAC;MACxE,IAAI,CAAC4D,IAAI,CAAC,SAAS,CAAC;MACpB,IAAI;QACA,MAAMjF,sBAAsB,CAAC,IAAI,EAAEgB,sBAAsB,EAAE,GAAG,CAAC,CAACT,IAAI,CAAC,IAAI,CAAC;MAC9E,CAAC,CACD,OAAOyE,GAAG,EAAE;QACRhF,sBAAsB,CAAC,IAAI,EAAEkB,mBAAmB,EAAE,GAAG,CAAC,CAACmE,OAAO,CAAC,CAAC;QAChE3E,sBAAsB,CAAC,IAAI,EAAEQ,mBAAmB,EAAEoE,SAAS,EAAE,GAAG,CAAC;QACjE,MAAMN,GAAG;MACb;MACAtE,sBAAsB,CAAC,IAAI,EAAEU,oBAAoB,EAAE,IAAI,EAAE,GAAG,CAAC;MAC7D,IAAI,CAAC6D,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC,CACD,OAAOD,GAAG,EAAE;MACR,MAAMD,OAAO,GAAG/E,sBAAsB,CAAC,IAAI,EAAEY,sBAAsB,EAAE,GAAG,EAAEY,4BAA4B,CAAC,CAACjB,IAAI,CAAC,IAAI,EAAEqE,OAAO,EAAE,EAAEI,GAAG,CAAC;MAClI,IAAI,OAAOD,OAAO,KAAK,QAAQ,EAAE;QAC7B,MAAMA,OAAO;MACjB;MACA,IAAI,CAACE,IAAI,CAAC,OAAO,EAAED,GAAG,CAAC;MACvB,MAAM,CAAC,CAAC,EAAExC,OAAO,CAAC+C,cAAc,EAAER,OAAO,CAAC;MAC1C,IAAI,CAACE,IAAI,CAAC,cAAc,CAAC;IAC7B;EACJ,CAAC,QAAQjF,sBAAsB,CAAC,IAAI,EAAEmB,mBAAmB,EAAE,GAAG,CAAC,IAAI,CAACnB,sBAAsB,CAAC,IAAI,EAAEoB,oBAAoB,EAAE,GAAG,CAAC;AAC/H,CAAC,EAAEM,yBAAyB,GAAG,SAASA,yBAAyBA,CAAA,EAAG;EAChE,OAAO,IAAI8D,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACpC,MAAM;MAAEC,YAAY;MAAEC;IAAO,CAAC,GAAG5F,sBAAsB,CAACa,EAAE,EAAEA,EAAE,EAAE,GAAG,EAAEE,wBAAwB,CAAC,CAACR,IAAI,CAACM,EAAE,EAAEb,sBAAsB,CAAC,IAAI,EAAEiB,oBAAoB,EAAE,GAAG,CAAC,CAAC,GAC5JjB,sBAAsB,CAAC,IAAI,EAAEY,sBAAsB,EAAE,GAAG,EAAEgB,4BAA4B,CAAC,CAACrB,IAAI,CAAC,IAAI,CAAC,GAClGP,sBAAsB,CAAC,IAAI,EAAEY,sBAAsB,EAAE,GAAG,EAAEe,4BAA4B,CAAC,CAACpB,IAAI,CAAC,IAAI,CAAC;IACtG,IAAIP,sBAAsB,CAAC,IAAI,EAAEiB,oBAAoB,EAAE,GAAG,CAAC,CAACwD,cAAc,EAAE;MACxEmB,MAAM,CAACC,UAAU,CAAC7F,sBAAsB,CAAC,IAAI,EAAEiB,oBAAoB,EAAE,GAAG,CAAC,CAACwD,cAAc,EAAE,MAAMmB,MAAM,CAACP,OAAO,CAAC,IAAI9C,QAAQ,CAACuD,sBAAsB,CAAC,CAAC,CAAC,CAAC;IAC1J;IACA,IAAI9F,sBAAsB,CAAC,IAAI,EAAEsB,4BAA4B,EAAE,GAAG,CAAC,EAAE;MACjEsE,MAAM,CAAC3B,KAAK,CAAC,CAAC;IAClB;IACA2B,MAAM,CACDG,UAAU,CAAC/F,sBAAsB,CAAC,IAAI,EAAEiB,oBAAoB,EAAE,GAAG,CAAC,CAAC0D,OAAO,CAAC,CAC3EqB,IAAI,CAAC,OAAO,EAAEN,MAAM,CAAC,CACrBM,IAAI,CAACL,YAAY,EAAE,MAAM;MAC1BC,MAAM,CACDC,UAAU,CAAC,CAAC;MACb;MAAA,CACCI,YAAY,CAACjG,sBAAsB,CAAC,IAAI,EAAEiB,oBAAoB,EAAE,GAAG,CAAC,CAACyD,SAAS,KAAK,KAAK,EAAE1E,sBAAsB,CAAC,IAAI,EAAEiB,oBAAoB,EAAE,GAAG,CAAC,CAACyD,SAAS,IAAI,CAAC,CAAC,CACjKwB,GAAG,CAAC,OAAO,EAAER,MAAM,CAAC,CACpBM,IAAI,CAAC,OAAO,EAAGhB,GAAG,IAAKhF,sBAAsB,CAAC,IAAI,EAAEY,sBAAsB,EAAE,GAAG,EAAEiB,0BAA0B,CAAC,CAACtB,IAAI,CAAC,IAAI,EAAEyE,GAAG,CAAC,CAAC,CAC7HgB,IAAI,CAAC,OAAO,EAAEG,QAAQ,IAAI;QAC3B,IAAI,CAACA,QAAQ,IAAInG,sBAAsB,CAAC,IAAI,EAAEmB,mBAAmB,EAAE,GAAG,CAAC,IAAInB,sBAAsB,CAAC,IAAI,EAAEkB,mBAAmB,EAAE,GAAG,CAAC,KAAK0E,MAAM,EAAE;UAC1I5F,sBAAsB,CAAC,IAAI,EAAEY,sBAAsB,EAAE,GAAG,EAAEiB,0BAA0B,CAAC,CAACtB,IAAI,CAAC,IAAI,EAAE,IAAIgC,QAAQ,CAAC6D,6BAA6B,CAAC,CAAC,CAAC;QAClJ;MACJ,CAAC,CAAC,CACGC,EAAE,CAAC,OAAO,EAAE,MAAM;QACnB3F,sBAAsB,CAAC,IAAI,EAAEW,8BAA8B,EAAE,KAAK,EAAE,GAAG,CAAC;QACxE,IAAI,CAAC4D,IAAI,CAAC,OAAO,CAAC;MACtB,CAAC,CAAC,CACGoB,EAAE,CAAC,MAAM,EAAEC,IAAI,IAAI,IAAI,CAACrB,IAAI,CAAC,MAAM,EAAEqB,IAAI,CAAC,CAAC;MAChDb,OAAO,CAACG,MAAM,CAAC;IACnB,CAAC,CAAC;EACN,CAAC,CAAC;AACN,CAAC,EAAEjE,4BAA4B,GAAG,SAASA,4BAA4BA,CAAA,EAAG;EACtE,OAAO;IACHgE,YAAY,EAAE,SAAS;IACvBC,MAAM,EAAEvD,GAAG,CAACa,OAAO,CAAClD,sBAAsB,CAAC,IAAI,EAAEiB,oBAAoB,EAAE,GAAG,CAAC,CAAC,CAAC;EACjF,CAAC;AACL,CAAC,EAAEW,4BAA4B,GAAG,SAASA,4BAA4BA,CAAA,EAAG;EACtE,OAAO;IACH+D,YAAY,EAAE,eAAe;IAC7BC,MAAM,EAAEtD,GAAG,CAACY,OAAO,CAAClD,sBAAsB,CAAC,IAAI,EAAEiB,oBAAoB,EAAE,GAAG,CAAC,CAAC,CAAC;EACjF,CAAC;AACL,CAAC,EAAEY,0BAA0B,GAAG,SAASA,0BAA0BA,CAACmD,GAAG,EAAE;EACrE,MAAMuB,QAAQ,GAAGvG,sBAAsB,CAAC,IAAI,EAAEoB,oBAAoB,EAAE,GAAG,CAAC;EACxEV,sBAAsB,CAAC,IAAI,EAAEU,oBAAoB,EAAE,KAAK,EAAE,GAAG,CAAC;EAC9D,IAAI,CAAC6D,IAAI,CAAC,OAAO,EAAED,GAAG,CAAC;EACvB,IAAI,CAACuB,QAAQ,IAAI,CAACvG,sBAAsB,CAAC,IAAI,EAAEmB,mBAAmB,EAAE,GAAG,CAAC,IAAI,OAAOnB,sBAAsB,CAAC,IAAI,EAAEY,sBAAsB,EAAE,GAAG,EAAEY,4BAA4B,CAAC,CAACjB,IAAI,CAAC,IAAI,EAAE,CAAC,EAAEyE,GAAG,CAAC,KAAK,QAAQ,EACtM;EACJ,IAAI,CAACC,IAAI,CAAC,cAAc,CAAC;EACzBjF,sBAAsB,CAAC,IAAI,EAAEY,sBAAsB,EAAE,GAAG,EAAEa,oBAAoB,CAAC,CAAClB,IAAI,CAAC,IAAI,CAAC,CAACiG,KAAK,CAAC,MAAM;IACnG;EAAA,CACH,CAAC;AACN,CAAC,EAAE1E,uBAAuB,GAAG,SAASA,uBAAuBA,CAAA,EAAG;EAC5DpB,sBAAsB,CAAC,IAAI,EAAEU,oBAAoB,EAAE,KAAK,EAAE,GAAG,CAAC;EAC9D,IAAIpB,sBAAsB,CAAC,IAAI,EAAEkB,mBAAmB,EAAE,GAAG,CAAC,EAAE;IACxDlB,sBAAsB,CAAC,IAAI,EAAEkB,mBAAmB,EAAE,GAAG,CAAC,CAACmE,OAAO,CAAC,CAAC;IAChE3E,sBAAsB,CAAC,IAAI,EAAEQ,mBAAmB,EAAEoE,SAAS,EAAE,GAAG,CAAC;EACrE;EACA,IAAI,CAACL,IAAI,CAAC,KAAK,CAAC;AACpB,CAAC;AACD/C,OAAO,CAACuE,OAAO,GAAGhE,WAAW","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}