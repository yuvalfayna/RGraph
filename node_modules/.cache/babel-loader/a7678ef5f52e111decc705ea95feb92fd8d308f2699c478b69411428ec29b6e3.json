{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst Command_1 = require(\"./Command\");\nconst utils_1 = require(\"./utils\");\nconst RedisParser = require(\"redis-parser\");\nconst SubscriptionSet_1 = require(\"./SubscriptionSet\");\nconst debug = (0, utils_1.Debug)(\"dataHandler\");\nclass DataHandler {\n  constructor(redis, parserOptions) {\n    this.redis = redis;\n    const parser = new RedisParser({\n      stringNumbers: parserOptions.stringNumbers,\n      returnBuffers: true,\n      returnError: err => {\n        this.returnError(err);\n      },\n      returnFatalError: err => {\n        this.returnFatalError(err);\n      },\n      returnReply: reply => {\n        this.returnReply(reply);\n      }\n    });\n    redis.stream.on(\"data\", data => {\n      parser.execute(data);\n    });\n  }\n  returnFatalError(err) {\n    err.message += \". Please report this.\";\n    this.redis.recoverFromFatalError(err, err, {\n      offlineQueue: false\n    });\n  }\n  returnError(err) {\n    const item = this.shiftCommand(err);\n    if (!item) {\n      return;\n    }\n    err.command = {\n      name: item.command.name,\n      args: item.command.args\n    };\n    this.redis.handleReconnection(err, item);\n  }\n  returnReply(reply) {\n    if (this.handleMonitorReply(reply)) {\n      return;\n    }\n    if (this.handleSubscriberReply(reply)) {\n      return;\n    }\n    const item = this.shiftCommand(reply);\n    if (!item) {\n      return;\n    }\n    if (Command_1.default.checkFlag(\"ENTER_SUBSCRIBER_MODE\", item.command.name)) {\n      this.redis.condition.subscriber = new SubscriptionSet_1.default();\n      this.redis.condition.subscriber.add(item.command.name, reply[1].toString());\n      if (!fillSubCommand(item.command, reply[2])) {\n        this.redis.commandQueue.unshift(item);\n      }\n    } else if (Command_1.default.checkFlag(\"EXIT_SUBSCRIBER_MODE\", item.command.name)) {\n      if (!fillUnsubCommand(item.command, reply[2])) {\n        this.redis.commandQueue.unshift(item);\n      }\n    } else {\n      item.command.resolve(reply);\n    }\n  }\n  handleSubscriberReply(reply) {\n    if (!this.redis.condition.subscriber) {\n      return false;\n    }\n    const replyType = Array.isArray(reply) ? reply[0].toString() : null;\n    debug('receive reply \"%s\" in subscriber mode', replyType);\n    switch (replyType) {\n      case \"message\":\n        if (this.redis.listeners(\"message\").length > 0) {\n          // Check if there're listeners to avoid unnecessary `toString()`.\n          this.redis.emit(\"message\", reply[1].toString(), reply[2] ? reply[2].toString() : \"\");\n        }\n        this.redis.emit(\"messageBuffer\", reply[1], reply[2]);\n        break;\n      case \"pmessage\":\n        {\n          const pattern = reply[1].toString();\n          if (this.redis.listeners(\"pmessage\").length > 0) {\n            this.redis.emit(\"pmessage\", pattern, reply[2].toString(), reply[3].toString());\n          }\n          this.redis.emit(\"pmessageBuffer\", pattern, reply[2], reply[3]);\n          break;\n        }\n      case \"smessage\":\n        {\n          if (this.redis.listeners(\"smessage\").length > 0) {\n            this.redis.emit(\"smessage\", reply[1].toString(), reply[2] ? reply[2].toString() : \"\");\n          }\n          this.redis.emit(\"smessageBuffer\", reply[1], reply[2]);\n          break;\n        }\n      case \"ssubscribe\":\n      case \"subscribe\":\n      case \"psubscribe\":\n        {\n          const channel = reply[1].toString();\n          this.redis.condition.subscriber.add(replyType, channel);\n          const item = this.shiftCommand(reply);\n          if (!item) {\n            return;\n          }\n          if (!fillSubCommand(item.command, reply[2])) {\n            this.redis.commandQueue.unshift(item);\n          }\n          break;\n        }\n      case \"sunsubscribe\":\n      case \"unsubscribe\":\n      case \"punsubscribe\":\n        {\n          const channel = reply[1] ? reply[1].toString() : null;\n          if (channel) {\n            this.redis.condition.subscriber.del(replyType, channel);\n          }\n          const count = reply[2];\n          if (Number(count) === 0) {\n            this.redis.condition.subscriber = false;\n          }\n          const item = this.shiftCommand(reply);\n          if (!item) {\n            return;\n          }\n          if (!fillUnsubCommand(item.command, count)) {\n            this.redis.commandQueue.unshift(item);\n          }\n          break;\n        }\n      default:\n        {\n          const item = this.shiftCommand(reply);\n          if (!item) {\n            return;\n          }\n          item.command.resolve(reply);\n        }\n    }\n    return true;\n  }\n  handleMonitorReply(reply) {\n    if (this.redis.status !== \"monitoring\") {\n      return false;\n    }\n    const replyStr = reply.toString();\n    if (replyStr === \"OK\") {\n      // Valid commands in the monitoring mode are AUTH and MONITOR,\n      // both of which always reply with 'OK'.\n      // So if we got an 'OK', we can make certain that\n      // the reply is made to AUTH & MONITOR.\n      return false;\n    }\n    // Since commands sent in the monitoring mode will trigger an exception,\n    // any replies we received in the monitoring mode should consider to be\n    // realtime monitor data instead of result of commands.\n    const len = replyStr.indexOf(\" \");\n    const timestamp = replyStr.slice(0, len);\n    const argIndex = replyStr.indexOf('\"');\n    const args = replyStr.slice(argIndex + 1, -1).split('\" \"').map(elem => elem.replace(/\\\\\"/g, '\"'));\n    const dbAndSource = replyStr.slice(len + 2, argIndex - 2).split(\" \");\n    this.redis.emit(\"monitor\", timestamp, args, dbAndSource[1], dbAndSource[0]);\n    return true;\n  }\n  shiftCommand(reply) {\n    const item = this.redis.commandQueue.shift();\n    if (!item) {\n      const message = \"Command queue state error. If you can reproduce this, please report it.\";\n      const error = new Error(message + (reply instanceof Error ? ` Last error: ${reply.message}` : ` Last reply: ${reply.toString()}`));\n      this.redis.emit(\"error\", error);\n      return null;\n    }\n    return item;\n  }\n}\nexports.default = DataHandler;\nconst remainingRepliesMap = new WeakMap();\nfunction fillSubCommand(command, count) {\n  let remainingReplies = remainingRepliesMap.has(command) ? remainingRepliesMap.get(command) : command.args.length;\n  remainingReplies -= 1;\n  if (remainingReplies <= 0) {\n    command.resolve(count);\n    remainingRepliesMap.delete(command);\n    return true;\n  }\n  remainingRepliesMap.set(command, remainingReplies);\n  return false;\n}\nfunction fillUnsubCommand(command, count) {\n  let remainingReplies = remainingRepliesMap.has(command) ? remainingRepliesMap.get(command) : command.args.length;\n  if (remainingReplies === 0) {\n    if (Number(count) === 0) {\n      remainingRepliesMap.delete(command);\n      command.resolve(count);\n      return true;\n    }\n    return false;\n  }\n  remainingReplies -= 1;\n  if (remainingReplies <= 0) {\n    command.resolve(count);\n    return true;\n  }\n  remainingRepliesMap.set(command, remainingReplies);\n  return false;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","Command_1","require","utils_1","RedisParser","SubscriptionSet_1","debug","Debug","DataHandler","constructor","redis","parserOptions","parser","stringNumbers","returnBuffers","returnError","err","returnFatalError","returnReply","reply","stream","on","data","execute","message","recoverFromFatalError","offlineQueue","item","shiftCommand","command","name","args","handleReconnection","handleMonitorReply","handleSubscriberReply","default","checkFlag","condition","subscriber","add","toString","fillSubCommand","commandQueue","unshift","fillUnsubCommand","resolve","replyType","Array","isArray","listeners","length","emit","pattern","channel","del","count","Number","status","replyStr","len","indexOf","timestamp","slice","argIndex","split","map","elem","replace","dbAndSource","shift","error","Error","remainingRepliesMap","WeakMap","remainingReplies","has","get","delete","set"],"sources":["C:/rgraph/node_modules/ioredis/built/DataHandler.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Command_1 = require(\"./Command\");\nconst utils_1 = require(\"./utils\");\nconst RedisParser = require(\"redis-parser\");\nconst SubscriptionSet_1 = require(\"./SubscriptionSet\");\nconst debug = (0, utils_1.Debug)(\"dataHandler\");\nclass DataHandler {\n    constructor(redis, parserOptions) {\n        this.redis = redis;\n        const parser = new RedisParser({\n            stringNumbers: parserOptions.stringNumbers,\n            returnBuffers: true,\n            returnError: (err) => {\n                this.returnError(err);\n            },\n            returnFatalError: (err) => {\n                this.returnFatalError(err);\n            },\n            returnReply: (reply) => {\n                this.returnReply(reply);\n            },\n        });\n        redis.stream.on(\"data\", (data) => {\n            parser.execute(data);\n        });\n    }\n    returnFatalError(err) {\n        err.message += \". Please report this.\";\n        this.redis.recoverFromFatalError(err, err, { offlineQueue: false });\n    }\n    returnError(err) {\n        const item = this.shiftCommand(err);\n        if (!item) {\n            return;\n        }\n        err.command = {\n            name: item.command.name,\n            args: item.command.args,\n        };\n        this.redis.handleReconnection(err, item);\n    }\n    returnReply(reply) {\n        if (this.handleMonitorReply(reply)) {\n            return;\n        }\n        if (this.handleSubscriberReply(reply)) {\n            return;\n        }\n        const item = this.shiftCommand(reply);\n        if (!item) {\n            return;\n        }\n        if (Command_1.default.checkFlag(\"ENTER_SUBSCRIBER_MODE\", item.command.name)) {\n            this.redis.condition.subscriber = new SubscriptionSet_1.default();\n            this.redis.condition.subscriber.add(item.command.name, reply[1].toString());\n            if (!fillSubCommand(item.command, reply[2])) {\n                this.redis.commandQueue.unshift(item);\n            }\n        }\n        else if (Command_1.default.checkFlag(\"EXIT_SUBSCRIBER_MODE\", item.command.name)) {\n            if (!fillUnsubCommand(item.command, reply[2])) {\n                this.redis.commandQueue.unshift(item);\n            }\n        }\n        else {\n            item.command.resolve(reply);\n        }\n    }\n    handleSubscriberReply(reply) {\n        if (!this.redis.condition.subscriber) {\n            return false;\n        }\n        const replyType = Array.isArray(reply) ? reply[0].toString() : null;\n        debug('receive reply \"%s\" in subscriber mode', replyType);\n        switch (replyType) {\n            case \"message\":\n                if (this.redis.listeners(\"message\").length > 0) {\n                    // Check if there're listeners to avoid unnecessary `toString()`.\n                    this.redis.emit(\"message\", reply[1].toString(), reply[2] ? reply[2].toString() : \"\");\n                }\n                this.redis.emit(\"messageBuffer\", reply[1], reply[2]);\n                break;\n            case \"pmessage\": {\n                const pattern = reply[1].toString();\n                if (this.redis.listeners(\"pmessage\").length > 0) {\n                    this.redis.emit(\"pmessage\", pattern, reply[2].toString(), reply[3].toString());\n                }\n                this.redis.emit(\"pmessageBuffer\", pattern, reply[2], reply[3]);\n                break;\n            }\n            case \"smessage\": {\n                if (this.redis.listeners(\"smessage\").length > 0) {\n                    this.redis.emit(\"smessage\", reply[1].toString(), reply[2] ? reply[2].toString() : \"\");\n                }\n                this.redis.emit(\"smessageBuffer\", reply[1], reply[2]);\n                break;\n            }\n            case \"ssubscribe\":\n            case \"subscribe\":\n            case \"psubscribe\": {\n                const channel = reply[1].toString();\n                this.redis.condition.subscriber.add(replyType, channel);\n                const item = this.shiftCommand(reply);\n                if (!item) {\n                    return;\n                }\n                if (!fillSubCommand(item.command, reply[2])) {\n                    this.redis.commandQueue.unshift(item);\n                }\n                break;\n            }\n            case \"sunsubscribe\":\n            case \"unsubscribe\":\n            case \"punsubscribe\": {\n                const channel = reply[1] ? reply[1].toString() : null;\n                if (channel) {\n                    this.redis.condition.subscriber.del(replyType, channel);\n                }\n                const count = reply[2];\n                if (Number(count) === 0) {\n                    this.redis.condition.subscriber = false;\n                }\n                const item = this.shiftCommand(reply);\n                if (!item) {\n                    return;\n                }\n                if (!fillUnsubCommand(item.command, count)) {\n                    this.redis.commandQueue.unshift(item);\n                }\n                break;\n            }\n            default: {\n                const item = this.shiftCommand(reply);\n                if (!item) {\n                    return;\n                }\n                item.command.resolve(reply);\n            }\n        }\n        return true;\n    }\n    handleMonitorReply(reply) {\n        if (this.redis.status !== \"monitoring\") {\n            return false;\n        }\n        const replyStr = reply.toString();\n        if (replyStr === \"OK\") {\n            // Valid commands in the monitoring mode are AUTH and MONITOR,\n            // both of which always reply with 'OK'.\n            // So if we got an 'OK', we can make certain that\n            // the reply is made to AUTH & MONITOR.\n            return false;\n        }\n        // Since commands sent in the monitoring mode will trigger an exception,\n        // any replies we received in the monitoring mode should consider to be\n        // realtime monitor data instead of result of commands.\n        const len = replyStr.indexOf(\" \");\n        const timestamp = replyStr.slice(0, len);\n        const argIndex = replyStr.indexOf('\"');\n        const args = replyStr\n            .slice(argIndex + 1, -1)\n            .split('\" \"')\n            .map((elem) => elem.replace(/\\\\\"/g, '\"'));\n        const dbAndSource = replyStr.slice(len + 2, argIndex - 2).split(\" \");\n        this.redis.emit(\"monitor\", timestamp, args, dbAndSource[1], dbAndSource[0]);\n        return true;\n    }\n    shiftCommand(reply) {\n        const item = this.redis.commandQueue.shift();\n        if (!item) {\n            const message = \"Command queue state error. If you can reproduce this, please report it.\";\n            const error = new Error(message +\n                (reply instanceof Error\n                    ? ` Last error: ${reply.message}`\n                    : ` Last reply: ${reply.toString()}`));\n            this.redis.emit(\"error\", error);\n            return null;\n        }\n        return item;\n    }\n}\nexports.default = DataHandler;\nconst remainingRepliesMap = new WeakMap();\nfunction fillSubCommand(command, count) {\n    let remainingReplies = remainingRepliesMap.has(command)\n        ? remainingRepliesMap.get(command)\n        : command.args.length;\n    remainingReplies -= 1;\n    if (remainingReplies <= 0) {\n        command.resolve(count);\n        remainingRepliesMap.delete(command);\n        return true;\n    }\n    remainingRepliesMap.set(command, remainingReplies);\n    return false;\n}\nfunction fillUnsubCommand(command, count) {\n    let remainingReplies = remainingRepliesMap.has(command)\n        ? remainingRepliesMap.get(command)\n        : command.args.length;\n    if (remainingReplies === 0) {\n        if (Number(count) === 0) {\n            remainingRepliesMap.delete(command);\n            command.resolve(count);\n            return true;\n        }\n        return false;\n    }\n    remainingReplies -= 1;\n    if (remainingReplies <= 0) {\n        command.resolve(count);\n        return true;\n    }\n    remainingRepliesMap.set(command, remainingReplies);\n    return false;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}