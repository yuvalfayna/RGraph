{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.genRedactedString = exports.getStringValue = exports.MAX_ARGUMENT_LENGTH = void 0;\nconst debug_1 = require(\"debug\");\nconst MAX_ARGUMENT_LENGTH = 200;\nexports.MAX_ARGUMENT_LENGTH = MAX_ARGUMENT_LENGTH;\nconst NAMESPACE_PREFIX = \"ioredis\";\n/**\n * helper function that tried to get a string value for\n * arbitrary \"debug\" arg\n */\nfunction getStringValue(v) {\n  if (v === null) {\n    return;\n  }\n  switch (typeof v) {\n    case \"boolean\":\n      return;\n    case \"number\":\n      return;\n    case \"object\":\n      if (Buffer.isBuffer(v)) {\n        return v.toString(\"hex\");\n      }\n      if (Array.isArray(v)) {\n        return v.join(\",\");\n      }\n      try {\n        return JSON.stringify(v);\n      } catch (e) {\n        return;\n      }\n    case \"string\":\n      return v;\n  }\n}\nexports.getStringValue = getStringValue;\n/**\n * helper function that redacts a string representation of a \"debug\" arg\n */\nfunction genRedactedString(str, maxLen) {\n  const {\n    length\n  } = str;\n  return length <= maxLen ? str : str.slice(0, maxLen) + ' ... <REDACTED full-length=\"' + length + '\">';\n}\nexports.genRedactedString = genRedactedString;\n/**\n * a wrapper for the `debug` module, used to generate\n * \"debug functions\" that trim the values in their output\n */\nfunction genDebugFunction(namespace) {\n  const fn = (0, debug_1.default)(`${NAMESPACE_PREFIX}:${namespace}`);\n  function wrappedDebug(...args) {\n    if (!fn.enabled) {\n      return; // no-op\n    }\n    // we skip the first arg because that is the message\n    for (let i = 1; i < args.length; i++) {\n      const str = getStringValue(args[i]);\n      if (typeof str === \"string\" && str.length > MAX_ARGUMENT_LENGTH) {\n        args[i] = genRedactedString(str, MAX_ARGUMENT_LENGTH);\n      }\n    }\n    return fn.apply(null, args);\n  }\n  Object.defineProperties(wrappedDebug, {\n    namespace: {\n      get() {\n        return fn.namespace;\n      }\n    },\n    enabled: {\n      get() {\n        return fn.enabled;\n      }\n    },\n    destroy: {\n      get() {\n        return fn.destroy;\n      }\n    },\n    log: {\n      get() {\n        return fn.log;\n      },\n      set(l) {\n        fn.log = l;\n      }\n    }\n  });\n  return wrappedDebug;\n}\nexports.default = genDebugFunction;","map":{"version":3,"names":["Object","defineProperty","exports","value","genRedactedString","getStringValue","MAX_ARGUMENT_LENGTH","debug_1","require","NAMESPACE_PREFIX","v","Buffer","isBuffer","toString","Array","isArray","join","JSON","stringify","e","str","maxLen","length","slice","genDebugFunction","namespace","fn","default","wrappedDebug","args","enabled","i","apply","defineProperties","get","destroy","log","set","l"],"sources":["C:/rgraph/node_modules/ioredis/built/utils/debug.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.genRedactedString = exports.getStringValue = exports.MAX_ARGUMENT_LENGTH = void 0;\nconst debug_1 = require(\"debug\");\nconst MAX_ARGUMENT_LENGTH = 200;\nexports.MAX_ARGUMENT_LENGTH = MAX_ARGUMENT_LENGTH;\nconst NAMESPACE_PREFIX = \"ioredis\";\n/**\n * helper function that tried to get a string value for\n * arbitrary \"debug\" arg\n */\nfunction getStringValue(v) {\n    if (v === null) {\n        return;\n    }\n    switch (typeof v) {\n        case \"boolean\":\n            return;\n        case \"number\":\n            return;\n        case \"object\":\n            if (Buffer.isBuffer(v)) {\n                return v.toString(\"hex\");\n            }\n            if (Array.isArray(v)) {\n                return v.join(\",\");\n            }\n            try {\n                return JSON.stringify(v);\n            }\n            catch (e) {\n                return;\n            }\n        case \"string\":\n            return v;\n    }\n}\nexports.getStringValue = getStringValue;\n/**\n * helper function that redacts a string representation of a \"debug\" arg\n */\nfunction genRedactedString(str, maxLen) {\n    const { length } = str;\n    return length <= maxLen\n        ? str\n        : str.slice(0, maxLen) + ' ... <REDACTED full-length=\"' + length + '\">';\n}\nexports.genRedactedString = genRedactedString;\n/**\n * a wrapper for the `debug` module, used to generate\n * \"debug functions\" that trim the values in their output\n */\nfunction genDebugFunction(namespace) {\n    const fn = (0, debug_1.default)(`${NAMESPACE_PREFIX}:${namespace}`);\n    function wrappedDebug(...args) {\n        if (!fn.enabled) {\n            return; // no-op\n        }\n        // we skip the first arg because that is the message\n        for (let i = 1; i < args.length; i++) {\n            const str = getStringValue(args[i]);\n            if (typeof str === \"string\" && str.length > MAX_ARGUMENT_LENGTH) {\n                args[i] = genRedactedString(str, MAX_ARGUMENT_LENGTH);\n            }\n        }\n        return fn.apply(null, args);\n    }\n    Object.defineProperties(wrappedDebug, {\n        namespace: {\n            get() {\n                return fn.namespace;\n            },\n        },\n        enabled: {\n            get() {\n                return fn.enabled;\n            },\n        },\n        destroy: {\n            get() {\n                return fn.destroy;\n            },\n        },\n        log: {\n            get() {\n                return fn.log;\n            },\n            set(l) {\n                fn.log = l;\n            },\n        },\n    });\n    return wrappedDebug;\n}\nexports.default = genDebugFunction;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}