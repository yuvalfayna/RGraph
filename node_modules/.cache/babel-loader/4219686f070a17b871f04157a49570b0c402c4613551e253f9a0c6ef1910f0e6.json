{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transformReply = exports.transformArguments = void 0;\nfunction transformArguments(index, query, options) {\n  const args = ['FT.SPELLCHECK', index, query];\n  if (options?.DISTANCE) {\n    args.push('DISTANCE', options.DISTANCE.toString());\n  }\n  if (options?.TERMS) {\n    if (Array.isArray(options.TERMS)) {\n      for (const term of options.TERMS) {\n        pushTerms(args, term);\n      }\n    } else {\n      pushTerms(args, options.TERMS);\n    }\n  }\n  if (options?.DIALECT) {\n    args.push('DIALECT', options.DIALECT.toString());\n  }\n  return args;\n}\nexports.transformArguments = transformArguments;\nfunction pushTerms(args, {\n  mode,\n  dictionary\n}) {\n  args.push('TERMS', mode, dictionary);\n}\nfunction transformReply(rawReply) {\n  return rawReply.map(([, term, suggestions]) => ({\n    term,\n    suggestions: suggestions.map(([score, suggestion]) => ({\n      score: Number(score),\n      suggestion\n    }))\n  }));\n}\nexports.transformReply = transformReply;","map":{"version":3,"names":["Object","defineProperty","exports","value","transformReply","transformArguments","index","query","options","args","DISTANCE","push","toString","TERMS","Array","isArray","term","pushTerms","DIALECT","mode","dictionary","rawReply","map","suggestions","score","suggestion","Number"],"sources":["C:/rgraph/node_modules/@redis/search/dist/commands/SPELLCHECK.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.transformReply = exports.transformArguments = void 0;\nfunction transformArguments(index, query, options) {\n    const args = ['FT.SPELLCHECK', index, query];\n    if (options?.DISTANCE) {\n        args.push('DISTANCE', options.DISTANCE.toString());\n    }\n    if (options?.TERMS) {\n        if (Array.isArray(options.TERMS)) {\n            for (const term of options.TERMS) {\n                pushTerms(args, term);\n            }\n        }\n        else {\n            pushTerms(args, options.TERMS);\n        }\n    }\n    if (options?.DIALECT) {\n        args.push('DIALECT', options.DIALECT.toString());\n    }\n    return args;\n}\nexports.transformArguments = transformArguments;\nfunction pushTerms(args, { mode, dictionary }) {\n    args.push('TERMS', mode, dictionary);\n}\nfunction transformReply(rawReply) {\n    return rawReply.map(([, term, suggestions]) => ({\n        term,\n        suggestions: suggestions.map(([score, suggestion]) => ({\n            score: Number(score),\n            suggestion\n        }))\n    }));\n}\nexports.transformReply = transformReply;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,cAAc,GAAGF,OAAO,CAACG,kBAAkB,GAAG,KAAK,CAAC;AAC5D,SAASA,kBAAkBA,CAACC,KAAK,EAAEC,KAAK,EAAEC,OAAO,EAAE;EAC/C,MAAMC,IAAI,GAAG,CAAC,eAAe,EAAEH,KAAK,EAAEC,KAAK,CAAC;EAC5C,IAAIC,OAAO,EAAEE,QAAQ,EAAE;IACnBD,IAAI,CAACE,IAAI,CAAC,UAAU,EAAEH,OAAO,CAACE,QAAQ,CAACE,QAAQ,CAAC,CAAC,CAAC;EACtD;EACA,IAAIJ,OAAO,EAAEK,KAAK,EAAE;IAChB,IAAIC,KAAK,CAACC,OAAO,CAACP,OAAO,CAACK,KAAK,CAAC,EAAE;MAC9B,KAAK,MAAMG,IAAI,IAAIR,OAAO,CAACK,KAAK,EAAE;QAC9BI,SAAS,CAACR,IAAI,EAAEO,IAAI,CAAC;MACzB;IACJ,CAAC,MACI;MACDC,SAAS,CAACR,IAAI,EAAED,OAAO,CAACK,KAAK,CAAC;IAClC;EACJ;EACA,IAAIL,OAAO,EAAEU,OAAO,EAAE;IAClBT,IAAI,CAACE,IAAI,CAAC,SAAS,EAAEH,OAAO,CAACU,OAAO,CAACN,QAAQ,CAAC,CAAC,CAAC;EACpD;EACA,OAAOH,IAAI;AACf;AACAP,OAAO,CAACG,kBAAkB,GAAGA,kBAAkB;AAC/C,SAASY,SAASA,CAACR,IAAI,EAAE;EAAEU,IAAI;EAAEC;AAAW,CAAC,EAAE;EAC3CX,IAAI,CAACE,IAAI,CAAC,OAAO,EAAEQ,IAAI,EAAEC,UAAU,CAAC;AACxC;AACA,SAAShB,cAAcA,CAACiB,QAAQ,EAAE;EAC9B,OAAOA,QAAQ,CAACC,GAAG,CAAC,CAAC,GAAGN,IAAI,EAAEO,WAAW,CAAC,MAAM;IAC5CP,IAAI;IACJO,WAAW,EAAEA,WAAW,CAACD,GAAG,CAAC,CAAC,CAACE,KAAK,EAAEC,UAAU,CAAC,MAAM;MACnDD,KAAK,EAAEE,MAAM,CAACF,KAAK,CAAC;MACpBC;IACJ,CAAC,CAAC;EACN,CAAC,CAAC,CAAC;AACP;AACAvB,OAAO,CAACE,cAAc,GAAGA,cAAc","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}