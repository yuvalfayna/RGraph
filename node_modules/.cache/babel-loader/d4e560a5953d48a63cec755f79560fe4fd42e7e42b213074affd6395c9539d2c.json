{"ast":null,"code":"\"use strict\";\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar _RedisClusterSlots_instances, _a, _RedisClusterSlots_SLOTS, _RedisClusterSlots_options, _RedisClusterSlots_Client, _RedisClusterSlots_emit, _RedisClusterSlots_isOpen, _RedisClusterSlots_discoverWithRootNodes, _RedisClusterSlots_resetSlots, _RedisClusterSlots_discover, _RedisClusterSlots_getShards, _RedisClusterSlots_getNodeAddress, _RedisClusterSlots_clientOptionsDefaults, _RedisClusterSlots_initiateSlotNode, _RedisClusterSlots_createClient, _RedisClusterSlots_createNodeClient, _RedisClusterSlots_runningRediscoverPromise, _RedisClusterSlots_rediscover, _RedisClusterSlots_destroy, _RedisClusterSlots_execOnNodeClient, _RedisClusterSlots_iterateAllNodes, _RedisClusterSlots_randomNodeIterator, _RedisClusterSlots_slotNodesIterator, _RedisClusterSlots_initiatePubSubClient, _RedisClusterSlots_initiateShardedPubSubClient;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst client_1 = require(\"../client\");\nconst errors_1 = require(\"../errors\");\nconst util_1 = require(\"util\");\nconst pub_sub_1 = require(\"../client/pub-sub\");\n// We need to use 'require', because it's not possible with Typescript to import\n// function that are exported as 'module.exports = function`, without esModuleInterop\n// set to true.\nconst calculateSlot = require('cluster-key-slot');\nclass RedisClusterSlots {\n  get isOpen() {\n    return __classPrivateFieldGet(this, _RedisClusterSlots_isOpen, \"f\");\n  }\n  constructor(options, emit) {\n    _RedisClusterSlots_instances.add(this);\n    _RedisClusterSlots_options.set(this, void 0);\n    _RedisClusterSlots_Client.set(this, void 0);\n    _RedisClusterSlots_emit.set(this, void 0);\n    Object.defineProperty(this, \"slots\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new Array(__classPrivateFieldGet(_a, _a, \"f\", _RedisClusterSlots_SLOTS))\n    });\n    Object.defineProperty(this, \"shards\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new Array()\n    });\n    Object.defineProperty(this, \"masters\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new Array()\n    });\n    Object.defineProperty(this, \"replicas\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new Array()\n    });\n    Object.defineProperty(this, \"nodeByAddress\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new Map()\n    });\n    Object.defineProperty(this, \"pubSubNode\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    _RedisClusterSlots_isOpen.set(this, false);\n    _RedisClusterSlots_runningRediscoverPromise.set(this, void 0);\n    _RedisClusterSlots_randomNodeIterator.set(this, void 0);\n    __classPrivateFieldSet(this, _RedisClusterSlots_options, options, \"f\");\n    __classPrivateFieldSet(this, _RedisClusterSlots_Client, client_1.default.extend(options), \"f\");\n    __classPrivateFieldSet(this, _RedisClusterSlots_emit, emit, \"f\");\n  }\n  async connect() {\n    if (__classPrivateFieldGet(this, _RedisClusterSlots_isOpen, \"f\")) {\n      throw new Error('Cluster already open');\n    }\n    __classPrivateFieldSet(this, _RedisClusterSlots_isOpen, true, \"f\");\n    try {\n      await __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_discoverWithRootNodes).call(this);\n    } catch (err) {\n      __classPrivateFieldSet(this, _RedisClusterSlots_isOpen, false, \"f\");\n      throw err;\n    }\n  }\n  nodeClient(node) {\n    return node.client ?? __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_createNodeClient).call(this, node);\n  }\n  async rediscover(startWith) {\n    __classPrivateFieldSet(this, _RedisClusterSlots_runningRediscoverPromise, __classPrivateFieldGet(this, _RedisClusterSlots_runningRediscoverPromise, \"f\") ?? __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_rediscover).call(this, startWith).finally(() => __classPrivateFieldSet(this, _RedisClusterSlots_runningRediscoverPromise, undefined, \"f\")), \"f\");\n    return __classPrivateFieldGet(this, _RedisClusterSlots_runningRediscoverPromise, \"f\");\n  }\n  quit() {\n    return __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_destroy).call(this, client => client.quit());\n  }\n  disconnect() {\n    return __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_destroy).call(this, client => client.disconnect());\n  }\n  getClient(firstKey, isReadonly) {\n    if (!firstKey) {\n      return this.nodeClient(this.getRandomNode());\n    }\n    const slotNumber = calculateSlot(firstKey);\n    if (!isReadonly) {\n      return this.nodeClient(this.slots[slotNumber].master);\n    }\n    return this.nodeClient(this.getSlotRandomNode(slotNumber));\n  }\n  getRandomNode() {\n    __classPrivateFieldSet(this, _RedisClusterSlots_randomNodeIterator, __classPrivateFieldGet(this, _RedisClusterSlots_randomNodeIterator, \"f\") ?? __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_iterateAllNodes).call(this), \"f\");\n    return __classPrivateFieldGet(this, _RedisClusterSlots_randomNodeIterator, \"f\").next().value;\n  }\n  getSlotRandomNode(slotNumber) {\n    const slot = this.slots[slotNumber];\n    if (!slot.replicas?.length) {\n      return slot.master;\n    }\n    slot.nodesIterator ?? (slot.nodesIterator = __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_slotNodesIterator).call(this, slot));\n    return slot.nodesIterator.next().value;\n  }\n  getMasterByAddress(address) {\n    const master = this.nodeByAddress.get(address);\n    if (!master) return;\n    return this.nodeClient(master);\n  }\n  getPubSubClient() {\n    return this.pubSubNode ? this.pubSubNode.client : __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_initiatePubSubClient).call(this);\n  }\n  async executeUnsubscribeCommand(unsubscribe) {\n    const client = await this.getPubSubClient();\n    await unsubscribe(client);\n    if (!client.isPubSubActive && client.isOpen) {\n      await client.disconnect();\n      this.pubSubNode = undefined;\n    }\n  }\n  getShardedPubSubClient(channel) {\n    const {\n      master\n    } = this.slots[calculateSlot(channel)];\n    return master.pubSubClient ?? __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_initiateShardedPubSubClient).call(this, master);\n  }\n  async executeShardedUnsubscribeCommand(channel, unsubscribe) {\n    const {\n      master\n    } = this.slots[calculateSlot(channel)];\n    if (!master.pubSubClient) return Promise.resolve();\n    const client = await master.pubSubClient;\n    await unsubscribe(client);\n    if (!client.isPubSubActive && client.isOpen) {\n      await client.disconnect();\n      master.pubSubClient = undefined;\n    }\n  }\n}\n_a = RedisClusterSlots, _RedisClusterSlots_options = new WeakMap(), _RedisClusterSlots_Client = new WeakMap(), _RedisClusterSlots_emit = new WeakMap(), _RedisClusterSlots_isOpen = new WeakMap(), _RedisClusterSlots_runningRediscoverPromise = new WeakMap(), _RedisClusterSlots_randomNodeIterator = new WeakMap(), _RedisClusterSlots_instances = new WeakSet(), _RedisClusterSlots_discoverWithRootNodes = async function _RedisClusterSlots_discoverWithRootNodes() {\n  let start = Math.floor(Math.random() * __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").rootNodes.length);\n  for (let i = start; i < __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").rootNodes.length; i++) {\n    if (await __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_discover).call(this, __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").rootNodes[i])) return;\n  }\n  for (let i = 0; i < start; i++) {\n    if (await __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_discover).call(this, __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").rootNodes[i])) return;\n  }\n  throw new errors_1.RootNodesUnavailableError();\n}, _RedisClusterSlots_resetSlots = function _RedisClusterSlots_resetSlots() {\n  this.slots = new Array(__classPrivateFieldGet(_a, _a, \"f\", _RedisClusterSlots_SLOTS));\n  this.shards = [];\n  this.masters = [];\n  this.replicas = [];\n  __classPrivateFieldSet(this, _RedisClusterSlots_randomNodeIterator, undefined, \"f\");\n}, _RedisClusterSlots_discover = async function _RedisClusterSlots_discover(rootNode) {\n  const addressesInUse = new Set();\n  try {\n    const shards = await __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_getShards).call(this, rootNode),\n      promises = [],\n      eagerConnect = __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").minimizeConnections !== true;\n    __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_resetSlots).call(this);\n    for (const {\n      from,\n      to,\n      master,\n      replicas\n    } of shards) {\n      const shard = {\n        master: __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_initiateSlotNode).call(this, master, false, eagerConnect, addressesInUse, promises)\n      };\n      if (__classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").useReplicas) {\n        shard.replicas = replicas.map(replica => __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_initiateSlotNode).call(this, replica, true, eagerConnect, addressesInUse, promises));\n      }\n      this.shards.push(shard);\n      for (let i = from; i <= to; i++) {\n        this.slots[i] = shard;\n      }\n    }\n    if (this.pubSubNode && !addressesInUse.has(this.pubSubNode.address)) {\n      if (util_1.types.isPromise(this.pubSubNode.client)) {\n        promises.push(this.pubSubNode.client.then(client => client.disconnect()));\n        this.pubSubNode = undefined;\n      } else {\n        promises.push(this.pubSubNode.client.disconnect());\n        const channelsListeners = this.pubSubNode.client.getPubSubListeners(pub_sub_1.PubSubType.CHANNELS),\n          patternsListeners = this.pubSubNode.client.getPubSubListeners(pub_sub_1.PubSubType.PATTERNS);\n        if (channelsListeners.size || patternsListeners.size) {\n          promises.push(__classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_initiatePubSubClient).call(this, {\n            [pub_sub_1.PubSubType.CHANNELS]: channelsListeners,\n            [pub_sub_1.PubSubType.PATTERNS]: patternsListeners\n          }));\n        }\n      }\n    }\n    for (const [address, node] of this.nodeByAddress.entries()) {\n      if (addressesInUse.has(address)) continue;\n      if (node.client) {\n        promises.push(__classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_execOnNodeClient).call(this, node.client, client => client.disconnect()));\n      }\n      const {\n        pubSubClient\n      } = node;\n      if (pubSubClient) {\n        promises.push(__classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_execOnNodeClient).call(this, pubSubClient, client => client.disconnect()));\n      }\n      this.nodeByAddress.delete(address);\n    }\n    await Promise.all(promises);\n    return true;\n  } catch (err) {\n    __classPrivateFieldGet(this, _RedisClusterSlots_emit, \"f\").call(this, 'error', err);\n    return false;\n  }\n}, _RedisClusterSlots_getShards = async function _RedisClusterSlots_getShards(rootNode) {\n  const client = new (__classPrivateFieldGet(this, _RedisClusterSlots_Client, \"f\"))(__classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_clientOptionsDefaults).call(this, rootNode, true));\n  client.on('error', err => __classPrivateFieldGet(this, _RedisClusterSlots_emit, \"f\").call(this, 'error', err));\n  await client.connect();\n  try {\n    // using `CLUSTER SLOTS` and not `CLUSTER SHARDS` to support older versions\n    return await client.clusterSlots();\n  } finally {\n    await client.disconnect();\n  }\n}, _RedisClusterSlots_getNodeAddress = function _RedisClusterSlots_getNodeAddress(address) {\n  switch (typeof __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").nodeAddressMap) {\n    case 'object':\n      return __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").nodeAddressMap[address];\n    case 'function':\n      return __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").nodeAddressMap(address);\n  }\n}, _RedisClusterSlots_clientOptionsDefaults = function _RedisClusterSlots_clientOptionsDefaults(options, disableReconnect) {\n  let result;\n  if (__classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").defaults) {\n    let socket;\n    if (__classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").defaults.socket) {\n      socket = {\n        ...__classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").defaults.socket,\n        ...options?.socket\n      };\n    } else {\n      socket = options?.socket;\n    }\n    result = {\n      ...__classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").defaults,\n      ...options,\n      socket\n    };\n  } else {\n    result = options;\n  }\n  if (disableReconnect) {\n    result ?? (result = {});\n    result.socket ?? (result.socket = {});\n    result.socket.reconnectStrategy = false;\n  }\n  return result;\n}, _RedisClusterSlots_initiateSlotNode = function _RedisClusterSlots_initiateSlotNode({\n  id,\n  ip,\n  port\n}, readonly, eagerConnent, addressesInUse, promises) {\n  const address = `${ip}:${port}`;\n  addressesInUse.add(address);\n  let node = this.nodeByAddress.get(address);\n  if (!node) {\n    node = {\n      id,\n      host: ip,\n      port,\n      address,\n      readonly,\n      client: undefined\n    };\n    if (eagerConnent) {\n      promises.push(__classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_createNodeClient).call(this, node));\n    }\n    this.nodeByAddress.set(address, node);\n  }\n  (readonly ? this.replicas : this.masters).push(node);\n  return node;\n}, _RedisClusterSlots_createClient = async function _RedisClusterSlots_createClient(node, readonly = node.readonly) {\n  const client = new (__classPrivateFieldGet(this, _RedisClusterSlots_Client, \"f\"))(__classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_clientOptionsDefaults).call(this, {\n    socket: __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_getNodeAddress).call(this, node.address) ?? {\n      host: node.host,\n      port: node.port\n    },\n    readonly\n  }));\n  client.on('error', err => __classPrivateFieldGet(this, _RedisClusterSlots_emit, \"f\").call(this, 'error', err));\n  await client.connect();\n  return client;\n}, _RedisClusterSlots_createNodeClient = function _RedisClusterSlots_createNodeClient(node) {\n  const promise = __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_createClient).call(this, node).then(client => {\n    node.client = client;\n    return client;\n  }).catch(err => {\n    node.client = undefined;\n    throw err;\n  });\n  node.client = promise;\n  return promise;\n}, _RedisClusterSlots_rediscover = async function _RedisClusterSlots_rediscover(startWith) {\n  if (await __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_discover).call(this, startWith.options)) return;\n  return __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_discoverWithRootNodes).call(this);\n}, _RedisClusterSlots_destroy = async function _RedisClusterSlots_destroy(fn) {\n  __classPrivateFieldSet(this, _RedisClusterSlots_isOpen, false, \"f\");\n  const promises = [];\n  for (const {\n    master,\n    replicas\n  } of this.shards) {\n    if (master.client) {\n      promises.push(__classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_execOnNodeClient).call(this, master.client, fn));\n    }\n    if (master.pubSubClient) {\n      promises.push(__classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_execOnNodeClient).call(this, master.pubSubClient, fn));\n    }\n    if (replicas) {\n      for (const {\n        client\n      } of replicas) {\n        if (client) {\n          promises.push(__classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_execOnNodeClient).call(this, client, fn));\n        }\n      }\n    }\n  }\n  if (this.pubSubNode) {\n    promises.push(__classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_execOnNodeClient).call(this, this.pubSubNode.client, fn));\n    this.pubSubNode = undefined;\n  }\n  __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_resetSlots).call(this);\n  this.nodeByAddress.clear();\n  await Promise.allSettled(promises);\n}, _RedisClusterSlots_execOnNodeClient = function _RedisClusterSlots_execOnNodeClient(client, fn) {\n  return util_1.types.isPromise(client) ? client.then(fn) : fn(client);\n}, _RedisClusterSlots_iterateAllNodes = function* _RedisClusterSlots_iterateAllNodes() {\n  let i = Math.floor(Math.random() * (this.masters.length + this.replicas.length));\n  if (i < this.masters.length) {\n    do {\n      yield this.masters[i];\n    } while (++i < this.masters.length);\n    for (const replica of this.replicas) {\n      yield replica;\n    }\n  } else {\n    i -= this.masters.length;\n    do {\n      yield this.replicas[i];\n    } while (++i < this.replicas.length);\n  }\n  while (true) {\n    for (const master of this.masters) {\n      yield master;\n    }\n    for (const replica of this.replicas) {\n      yield replica;\n    }\n  }\n}, _RedisClusterSlots_slotNodesIterator = function* _RedisClusterSlots_slotNodesIterator(slot) {\n  let i = Math.floor(Math.random() * (1 + slot.replicas.length));\n  if (i < slot.replicas.length) {\n    do {\n      yield slot.replicas[i];\n    } while (++i < slot.replicas.length);\n  }\n  while (true) {\n    yield slot.master;\n    for (const replica of slot.replicas) {\n      yield replica;\n    }\n  }\n}, _RedisClusterSlots_initiatePubSubClient = async function _RedisClusterSlots_initiatePubSubClient(toResubscribe) {\n  const index = Math.floor(Math.random() * (this.masters.length + this.replicas.length)),\n    node = index < this.masters.length ? this.masters[index] : this.replicas[index - this.masters.length];\n  this.pubSubNode = {\n    address: node.address,\n    client: __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_createClient).call(this, node, true).then(async client => {\n      if (toResubscribe) {\n        await Promise.all([client.extendPubSubListeners(pub_sub_1.PubSubType.CHANNELS, toResubscribe[pub_sub_1.PubSubType.CHANNELS]), client.extendPubSubListeners(pub_sub_1.PubSubType.PATTERNS, toResubscribe[pub_sub_1.PubSubType.PATTERNS])]);\n      }\n      this.pubSubNode.client = client;\n      return client;\n    }).catch(err => {\n      this.pubSubNode = undefined;\n      throw err;\n    })\n  };\n  return this.pubSubNode.client;\n}, _RedisClusterSlots_initiateShardedPubSubClient = function _RedisClusterSlots_initiateShardedPubSubClient(master) {\n  const promise = __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_createClient).call(this, master, true).then(client => {\n    client.on('server-sunsubscribe', async (channel, listeners) => {\n      try {\n        await this.rediscover(client);\n        const redirectTo = await this.getShardedPubSubClient(channel);\n        redirectTo.extendPubSubChannelListeners(pub_sub_1.PubSubType.SHARDED, channel, listeners);\n      } catch (err) {\n        __classPrivateFieldGet(this, _RedisClusterSlots_emit, \"f\").call(this, 'sharded-shannel-moved-error', err, channel, listeners);\n      }\n    });\n    master.pubSubClient = client;\n    return client;\n  }).catch(err => {\n    master.pubSubClient = undefined;\n    throw err;\n  });\n  master.pubSubClient = promise;\n  return promise;\n};\n_RedisClusterSlots_SLOTS = {\n  value: 16384\n};\nexports.default = RedisClusterSlots;","map":{"version":3,"names":["__classPrivateFieldGet","receiver","state","kind","f","TypeError","has","call","value","get","__classPrivateFieldSet","set","_RedisClusterSlots_instances","_a","_RedisClusterSlots_SLOTS","_RedisClusterSlots_options","_RedisClusterSlots_Client","_RedisClusterSlots_emit","_RedisClusterSlots_isOpen","_RedisClusterSlots_discoverWithRootNodes","_RedisClusterSlots_resetSlots","_RedisClusterSlots_discover","_RedisClusterSlots_getShards","_RedisClusterSlots_getNodeAddress","_RedisClusterSlots_clientOptionsDefaults","_RedisClusterSlots_initiateSlotNode","_RedisClusterSlots_createClient","_RedisClusterSlots_createNodeClient","_RedisClusterSlots_runningRediscoverPromise","_RedisClusterSlots_rediscover","_RedisClusterSlots_destroy","_RedisClusterSlots_execOnNodeClient","_RedisClusterSlots_iterateAllNodes","_RedisClusterSlots_randomNodeIterator","_RedisClusterSlots_slotNodesIterator","_RedisClusterSlots_initiatePubSubClient","_RedisClusterSlots_initiateShardedPubSubClient","Object","defineProperty","exports","client_1","require","errors_1","util_1","pub_sub_1","calculateSlot","RedisClusterSlots","isOpen","constructor","options","emit","add","enumerable","configurable","writable","Array","Map","default","extend","connect","Error","err","nodeClient","node","client","rediscover","startWith","finally","undefined","quit","disconnect","getClient","firstKey","isReadonly","getRandomNode","slotNumber","slots","master","getSlotRandomNode","next","slot","replicas","length","nodesIterator","getMasterByAddress","address","nodeByAddress","getPubSubClient","pubSubNode","executeUnsubscribeCommand","unsubscribe","isPubSubActive","getShardedPubSubClient","channel","pubSubClient","executeShardedUnsubscribeCommand","Promise","resolve","WeakMap","WeakSet","start","Math","floor","random","rootNodes","i","RootNodesUnavailableError","shards","masters","rootNode","addressesInUse","Set","promises","eagerConnect","minimizeConnections","from","to","shard","useReplicas","map","replica","push","types","isPromise","then","channelsListeners","getPubSubListeners","PubSubType","CHANNELS","patternsListeners","PATTERNS","size","entries","delete","all","on","clusterSlots","nodeAddressMap","disableReconnect","result","defaults","socket","reconnectStrategy","id","ip","port","readonly","eagerConnent","host","promise","catch","fn","clear","allSettled","toResubscribe","index","extendPubSubListeners","listeners","redirectTo","extendPubSubChannelListeners","SHARDED"],"sources":["C:/rgraph/node_modules/@redis/client/dist/lib/cluster/cluster-slots.js"],"sourcesContent":["\"use strict\";\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _RedisClusterSlots_instances, _a, _RedisClusterSlots_SLOTS, _RedisClusterSlots_options, _RedisClusterSlots_Client, _RedisClusterSlots_emit, _RedisClusterSlots_isOpen, _RedisClusterSlots_discoverWithRootNodes, _RedisClusterSlots_resetSlots, _RedisClusterSlots_discover, _RedisClusterSlots_getShards, _RedisClusterSlots_getNodeAddress, _RedisClusterSlots_clientOptionsDefaults, _RedisClusterSlots_initiateSlotNode, _RedisClusterSlots_createClient, _RedisClusterSlots_createNodeClient, _RedisClusterSlots_runningRediscoverPromise, _RedisClusterSlots_rediscover, _RedisClusterSlots_destroy, _RedisClusterSlots_execOnNodeClient, _RedisClusterSlots_iterateAllNodes, _RedisClusterSlots_randomNodeIterator, _RedisClusterSlots_slotNodesIterator, _RedisClusterSlots_initiatePubSubClient, _RedisClusterSlots_initiateShardedPubSubClient;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_1 = require(\"../client\");\nconst errors_1 = require(\"../errors\");\nconst util_1 = require(\"util\");\nconst pub_sub_1 = require(\"../client/pub-sub\");\n// We need to use 'require', because it's not possible with Typescript to import\n// function that are exported as 'module.exports = function`, without esModuleInterop\n// set to true.\nconst calculateSlot = require('cluster-key-slot');\nclass RedisClusterSlots {\n    get isOpen() {\n        return __classPrivateFieldGet(this, _RedisClusterSlots_isOpen, \"f\");\n    }\n    constructor(options, emit) {\n        _RedisClusterSlots_instances.add(this);\n        _RedisClusterSlots_options.set(this, void 0);\n        _RedisClusterSlots_Client.set(this, void 0);\n        _RedisClusterSlots_emit.set(this, void 0);\n        Object.defineProperty(this, \"slots\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Array(__classPrivateFieldGet(_a, _a, \"f\", _RedisClusterSlots_SLOTS))\n        });\n        Object.defineProperty(this, \"shards\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Array()\n        });\n        Object.defineProperty(this, \"masters\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Array()\n        });\n        Object.defineProperty(this, \"replicas\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Array()\n        });\n        Object.defineProperty(this, \"nodeByAddress\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Map()\n        });\n        Object.defineProperty(this, \"pubSubNode\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        _RedisClusterSlots_isOpen.set(this, false);\n        _RedisClusterSlots_runningRediscoverPromise.set(this, void 0);\n        _RedisClusterSlots_randomNodeIterator.set(this, void 0);\n        __classPrivateFieldSet(this, _RedisClusterSlots_options, options, \"f\");\n        __classPrivateFieldSet(this, _RedisClusterSlots_Client, client_1.default.extend(options), \"f\");\n        __classPrivateFieldSet(this, _RedisClusterSlots_emit, emit, \"f\");\n    }\n    async connect() {\n        if (__classPrivateFieldGet(this, _RedisClusterSlots_isOpen, \"f\")) {\n            throw new Error('Cluster already open');\n        }\n        __classPrivateFieldSet(this, _RedisClusterSlots_isOpen, true, \"f\");\n        try {\n            await __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_discoverWithRootNodes).call(this);\n        }\n        catch (err) {\n            __classPrivateFieldSet(this, _RedisClusterSlots_isOpen, false, \"f\");\n            throw err;\n        }\n    }\n    nodeClient(node) {\n        return node.client ?? __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_createNodeClient).call(this, node);\n    }\n    async rediscover(startWith) {\n        __classPrivateFieldSet(this, _RedisClusterSlots_runningRediscoverPromise, __classPrivateFieldGet(this, _RedisClusterSlots_runningRediscoverPromise, \"f\") ?? __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_rediscover).call(this, startWith)\n            .finally(() => __classPrivateFieldSet(this, _RedisClusterSlots_runningRediscoverPromise, undefined, \"f\")), \"f\");\n        return __classPrivateFieldGet(this, _RedisClusterSlots_runningRediscoverPromise, \"f\");\n    }\n    quit() {\n        return __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_destroy).call(this, client => client.quit());\n    }\n    disconnect() {\n        return __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_destroy).call(this, client => client.disconnect());\n    }\n    getClient(firstKey, isReadonly) {\n        if (!firstKey) {\n            return this.nodeClient(this.getRandomNode());\n        }\n        const slotNumber = calculateSlot(firstKey);\n        if (!isReadonly) {\n            return this.nodeClient(this.slots[slotNumber].master);\n        }\n        return this.nodeClient(this.getSlotRandomNode(slotNumber));\n    }\n    getRandomNode() {\n        __classPrivateFieldSet(this, _RedisClusterSlots_randomNodeIterator, __classPrivateFieldGet(this, _RedisClusterSlots_randomNodeIterator, \"f\") ?? __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_iterateAllNodes).call(this), \"f\");\n        return __classPrivateFieldGet(this, _RedisClusterSlots_randomNodeIterator, \"f\").next().value;\n    }\n    getSlotRandomNode(slotNumber) {\n        const slot = this.slots[slotNumber];\n        if (!slot.replicas?.length) {\n            return slot.master;\n        }\n        slot.nodesIterator ?? (slot.nodesIterator = __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_slotNodesIterator).call(this, slot));\n        return slot.nodesIterator.next().value;\n    }\n    getMasterByAddress(address) {\n        const master = this.nodeByAddress.get(address);\n        if (!master)\n            return;\n        return this.nodeClient(master);\n    }\n    getPubSubClient() {\n        return this.pubSubNode ?\n            this.pubSubNode.client :\n            __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_initiatePubSubClient).call(this);\n    }\n    async executeUnsubscribeCommand(unsubscribe) {\n        const client = await this.getPubSubClient();\n        await unsubscribe(client);\n        if (!client.isPubSubActive && client.isOpen) {\n            await client.disconnect();\n            this.pubSubNode = undefined;\n        }\n    }\n    getShardedPubSubClient(channel) {\n        const { master } = this.slots[calculateSlot(channel)];\n        return master.pubSubClient ?? __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_initiateShardedPubSubClient).call(this, master);\n    }\n    async executeShardedUnsubscribeCommand(channel, unsubscribe) {\n        const { master } = this.slots[calculateSlot(channel)];\n        if (!master.pubSubClient)\n            return Promise.resolve();\n        const client = await master.pubSubClient;\n        await unsubscribe(client);\n        if (!client.isPubSubActive && client.isOpen) {\n            await client.disconnect();\n            master.pubSubClient = undefined;\n        }\n    }\n}\n_a = RedisClusterSlots, _RedisClusterSlots_options = new WeakMap(), _RedisClusterSlots_Client = new WeakMap(), _RedisClusterSlots_emit = new WeakMap(), _RedisClusterSlots_isOpen = new WeakMap(), _RedisClusterSlots_runningRediscoverPromise = new WeakMap(), _RedisClusterSlots_randomNodeIterator = new WeakMap(), _RedisClusterSlots_instances = new WeakSet(), _RedisClusterSlots_discoverWithRootNodes = async function _RedisClusterSlots_discoverWithRootNodes() {\n    let start = Math.floor(Math.random() * __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").rootNodes.length);\n    for (let i = start; i < __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").rootNodes.length; i++) {\n        if (await __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_discover).call(this, __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").rootNodes[i]))\n            return;\n    }\n    for (let i = 0; i < start; i++) {\n        if (await __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_discover).call(this, __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").rootNodes[i]))\n            return;\n    }\n    throw new errors_1.RootNodesUnavailableError();\n}, _RedisClusterSlots_resetSlots = function _RedisClusterSlots_resetSlots() {\n    this.slots = new Array(__classPrivateFieldGet(_a, _a, \"f\", _RedisClusterSlots_SLOTS));\n    this.shards = [];\n    this.masters = [];\n    this.replicas = [];\n    __classPrivateFieldSet(this, _RedisClusterSlots_randomNodeIterator, undefined, \"f\");\n}, _RedisClusterSlots_discover = async function _RedisClusterSlots_discover(rootNode) {\n    const addressesInUse = new Set();\n    try {\n        const shards = await __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_getShards).call(this, rootNode), promises = [], eagerConnect = __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").minimizeConnections !== true;\n        __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_resetSlots).call(this);\n        for (const { from, to, master, replicas } of shards) {\n            const shard = {\n                master: __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_initiateSlotNode).call(this, master, false, eagerConnect, addressesInUse, promises)\n            };\n            if (__classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").useReplicas) {\n                shard.replicas = replicas.map(replica => __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_initiateSlotNode).call(this, replica, true, eagerConnect, addressesInUse, promises));\n            }\n            this.shards.push(shard);\n            for (let i = from; i <= to; i++) {\n                this.slots[i] = shard;\n            }\n        }\n        if (this.pubSubNode && !addressesInUse.has(this.pubSubNode.address)) {\n            if (util_1.types.isPromise(this.pubSubNode.client)) {\n                promises.push(this.pubSubNode.client.then(client => client.disconnect()));\n                this.pubSubNode = undefined;\n            }\n            else {\n                promises.push(this.pubSubNode.client.disconnect());\n                const channelsListeners = this.pubSubNode.client.getPubSubListeners(pub_sub_1.PubSubType.CHANNELS), patternsListeners = this.pubSubNode.client.getPubSubListeners(pub_sub_1.PubSubType.PATTERNS);\n                if (channelsListeners.size || patternsListeners.size) {\n                    promises.push(__classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_initiatePubSubClient).call(this, {\n                        [pub_sub_1.PubSubType.CHANNELS]: channelsListeners,\n                        [pub_sub_1.PubSubType.PATTERNS]: patternsListeners\n                    }));\n                }\n            }\n        }\n        for (const [address, node] of this.nodeByAddress.entries()) {\n            if (addressesInUse.has(address))\n                continue;\n            if (node.client) {\n                promises.push(__classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_execOnNodeClient).call(this, node.client, client => client.disconnect()));\n            }\n            const { pubSubClient } = node;\n            if (pubSubClient) {\n                promises.push(__classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_execOnNodeClient).call(this, pubSubClient, client => client.disconnect()));\n            }\n            this.nodeByAddress.delete(address);\n        }\n        await Promise.all(promises);\n        return true;\n    }\n    catch (err) {\n        __classPrivateFieldGet(this, _RedisClusterSlots_emit, \"f\").call(this, 'error', err);\n        return false;\n    }\n}, _RedisClusterSlots_getShards = async function _RedisClusterSlots_getShards(rootNode) {\n    const client = new (__classPrivateFieldGet(this, _RedisClusterSlots_Client, \"f\"))(__classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_clientOptionsDefaults).call(this, rootNode, true));\n    client.on('error', err => __classPrivateFieldGet(this, _RedisClusterSlots_emit, \"f\").call(this, 'error', err));\n    await client.connect();\n    try {\n        // using `CLUSTER SLOTS` and not `CLUSTER SHARDS` to support older versions\n        return await client.clusterSlots();\n    }\n    finally {\n        await client.disconnect();\n    }\n}, _RedisClusterSlots_getNodeAddress = function _RedisClusterSlots_getNodeAddress(address) {\n    switch (typeof __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").nodeAddressMap) {\n        case 'object':\n            return __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").nodeAddressMap[address];\n        case 'function':\n            return __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").nodeAddressMap(address);\n    }\n}, _RedisClusterSlots_clientOptionsDefaults = function _RedisClusterSlots_clientOptionsDefaults(options, disableReconnect) {\n    let result;\n    if (__classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").defaults) {\n        let socket;\n        if (__classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").defaults.socket) {\n            socket = {\n                ...__classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").defaults.socket,\n                ...options?.socket\n            };\n        }\n        else {\n            socket = options?.socket;\n        }\n        result = {\n            ...__classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").defaults,\n            ...options,\n            socket\n        };\n    }\n    else {\n        result = options;\n    }\n    if (disableReconnect) {\n        result ?? (result = {});\n        result.socket ?? (result.socket = {});\n        result.socket.reconnectStrategy = false;\n    }\n    return result;\n}, _RedisClusterSlots_initiateSlotNode = function _RedisClusterSlots_initiateSlotNode({ id, ip, port }, readonly, eagerConnent, addressesInUse, promises) {\n    const address = `${ip}:${port}`;\n    addressesInUse.add(address);\n    let node = this.nodeByAddress.get(address);\n    if (!node) {\n        node = {\n            id,\n            host: ip,\n            port,\n            address,\n            readonly,\n            client: undefined\n        };\n        if (eagerConnent) {\n            promises.push(__classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_createNodeClient).call(this, node));\n        }\n        this.nodeByAddress.set(address, node);\n    }\n    (readonly ? this.replicas : this.masters).push(node);\n    return node;\n}, _RedisClusterSlots_createClient = async function _RedisClusterSlots_createClient(node, readonly = node.readonly) {\n    const client = new (__classPrivateFieldGet(this, _RedisClusterSlots_Client, \"f\"))(__classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_clientOptionsDefaults).call(this, {\n        socket: __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_getNodeAddress).call(this, node.address) ?? {\n            host: node.host,\n            port: node.port\n        },\n        readonly\n    }));\n    client.on('error', err => __classPrivateFieldGet(this, _RedisClusterSlots_emit, \"f\").call(this, 'error', err));\n    await client.connect();\n    return client;\n}, _RedisClusterSlots_createNodeClient = function _RedisClusterSlots_createNodeClient(node) {\n    const promise = __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_createClient).call(this, node)\n        .then(client => {\n        node.client = client;\n        return client;\n    })\n        .catch(err => {\n        node.client = undefined;\n        throw err;\n    });\n    node.client = promise;\n    return promise;\n}, _RedisClusterSlots_rediscover = async function _RedisClusterSlots_rediscover(startWith) {\n    if (await __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_discover).call(this, startWith.options))\n        return;\n    return __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_discoverWithRootNodes).call(this);\n}, _RedisClusterSlots_destroy = async function _RedisClusterSlots_destroy(fn) {\n    __classPrivateFieldSet(this, _RedisClusterSlots_isOpen, false, \"f\");\n    const promises = [];\n    for (const { master, replicas } of this.shards) {\n        if (master.client) {\n            promises.push(__classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_execOnNodeClient).call(this, master.client, fn));\n        }\n        if (master.pubSubClient) {\n            promises.push(__classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_execOnNodeClient).call(this, master.pubSubClient, fn));\n        }\n        if (replicas) {\n            for (const { client } of replicas) {\n                if (client) {\n                    promises.push(__classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_execOnNodeClient).call(this, client, fn));\n                }\n            }\n        }\n    }\n    if (this.pubSubNode) {\n        promises.push(__classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_execOnNodeClient).call(this, this.pubSubNode.client, fn));\n        this.pubSubNode = undefined;\n    }\n    __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_resetSlots).call(this);\n    this.nodeByAddress.clear();\n    await Promise.allSettled(promises);\n}, _RedisClusterSlots_execOnNodeClient = function _RedisClusterSlots_execOnNodeClient(client, fn) {\n    return util_1.types.isPromise(client) ?\n        client.then(fn) :\n        fn(client);\n}, _RedisClusterSlots_iterateAllNodes = function* _RedisClusterSlots_iterateAllNodes() {\n    let i = Math.floor(Math.random() * (this.masters.length + this.replicas.length));\n    if (i < this.masters.length) {\n        do {\n            yield this.masters[i];\n        } while (++i < this.masters.length);\n        for (const replica of this.replicas) {\n            yield replica;\n        }\n    }\n    else {\n        i -= this.masters.length;\n        do {\n            yield this.replicas[i];\n        } while (++i < this.replicas.length);\n    }\n    while (true) {\n        for (const master of this.masters) {\n            yield master;\n        }\n        for (const replica of this.replicas) {\n            yield replica;\n        }\n    }\n}, _RedisClusterSlots_slotNodesIterator = function* _RedisClusterSlots_slotNodesIterator(slot) {\n    let i = Math.floor(Math.random() * (1 + slot.replicas.length));\n    if (i < slot.replicas.length) {\n        do {\n            yield slot.replicas[i];\n        } while (++i < slot.replicas.length);\n    }\n    while (true) {\n        yield slot.master;\n        for (const replica of slot.replicas) {\n            yield replica;\n        }\n    }\n}, _RedisClusterSlots_initiatePubSubClient = async function _RedisClusterSlots_initiatePubSubClient(toResubscribe) {\n    const index = Math.floor(Math.random() * (this.masters.length + this.replicas.length)), node = index < this.masters.length ?\n        this.masters[index] :\n        this.replicas[index - this.masters.length];\n    this.pubSubNode = {\n        address: node.address,\n        client: __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_createClient).call(this, node, true)\n            .then(async (client) => {\n            if (toResubscribe) {\n                await Promise.all([\n                    client.extendPubSubListeners(pub_sub_1.PubSubType.CHANNELS, toResubscribe[pub_sub_1.PubSubType.CHANNELS]),\n                    client.extendPubSubListeners(pub_sub_1.PubSubType.PATTERNS, toResubscribe[pub_sub_1.PubSubType.PATTERNS])\n                ]);\n            }\n            this.pubSubNode.client = client;\n            return client;\n        })\n            .catch(err => {\n            this.pubSubNode = undefined;\n            throw err;\n        })\n    };\n    return this.pubSubNode.client;\n}, _RedisClusterSlots_initiateShardedPubSubClient = function _RedisClusterSlots_initiateShardedPubSubClient(master) {\n    const promise = __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_createClient).call(this, master, true)\n        .then(client => {\n        client.on('server-sunsubscribe', async (channel, listeners) => {\n            try {\n                await this.rediscover(client);\n                const redirectTo = await this.getShardedPubSubClient(channel);\n                redirectTo.extendPubSubChannelListeners(pub_sub_1.PubSubType.SHARDED, channel, listeners);\n            }\n            catch (err) {\n                __classPrivateFieldGet(this, _RedisClusterSlots_emit, \"f\").call(this, 'sharded-shannel-moved-error', err, channel, listeners);\n            }\n        });\n        master.pubSubClient = client;\n        return client;\n    })\n        .catch(err => {\n        master.pubSubClient = undefined;\n        throw err;\n    });\n    master.pubSubClient = promise;\n    return promise;\n};\n_RedisClusterSlots_SLOTS = { value: 16384 };\nexports.default = RedisClusterSlots;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}